/*
 * This file generated by:
 * interrogate -D__inline -DCPPPARSER -DP3_INTERROGATE=1 -D__cplusplus -fnames -string -refcount -assert -SC:\Panda3D-1.8.1\include\parser-inc -SC:\Panda3D-1.8.1\include -IC:\Panda3D-1.8.1\include -oc libpandadna_igate.cxx -od libpandadna.in -python-native BlockHandle.h CompCodes.h DNAAnimBuilding.h DNAAnimProp.h DNABattleCell.h DNACornice.h DNADoor.h DNAFlatBuilding.h DNAFlatDoor.h DNAGroup.h DNAInteractiveProp.h DNALandmarkBuilding.h DNALoader.h DNANode.h DNAProp.h DNASign.h DNASignBaseline.h DNASignGraphic.h DNASignText.h DNAStorage.h DNAStreet.h DNASuitEdge.h DNASuitPoint.h DNAVisGroup.h DNAWall.h DNAWindows.h dnabase.h -module libpandadna -library libpandadna -Dvolatile= 
 *
 */

#include "dtoolbase.h"
#include "interrogate_request.h"
#include "dconfig.h"
#include "pnotify.h"
#include <sstream>
#define PANDA_LIBRARY_NAME_libpandadna
#include "py_panda.h"  

#include "BlockHandle.h"
#include "CompCodes.h"
#include "DNAAnimBuilding.h"
#include "DNAAnimProp.h"
#include "DNABattleCell.h"
#include "DNACornice.h"
#include "DNADoor.h"
#include "DNAFlatBuilding.h"
#include "DNAFlatDoor.h"
#include "DNAGroup.h"
#include "DNAInteractiveProp.h"
#include "DNALandmarkBuilding.h"
#include "DNALoader.h"
#include "DNANode.h"
#include "DNAProp.h"
#include "DNASign.h"
#include "DNASignBaseline.h"
#include "DNASignGraphic.h"
#include "DNASignText.h"
#include "DNAStorage.h"
#include "DNAStreet.h"
#include "DNASuitEdge.h"
#include "DNASuitPoint.h"
#include "DNAVisGroup.h"
#include "DNAWall.h"
#include "DNAWindows.h"
#include <datagram.h>
#include <datagramIterator.h>
#include "dnabase.h"
#include "dtool_config.h"
#include <filename.h>
#include <lvector3.h>
#include <map>
#include <nodePath.h>
#include "pandabase.h"
#include <textFont.h>
#include <texture.h>
#include <vector>

#undef HAVE_LONG_LONG
#undef _POSIX_C_SOURCE

#if PYTHON_FRAMEWORK
  #include "Python/Python.h"
#else
  #include "Python.h"
#endif
#ifdef HAVE_LONG_LONG
#undef HAVE_LONG_LONG
#endif 

//********************************************************************
//*** prototypes for .. Glabal
//********************************************************************
//********************************************************************
//*** prototypes for .. DNAGroup
//********************************************************************
typedef  DNAGroup  DNAGroup_localtype;
Define_Module_Class(libpandadna,DNAGroup,DNAGroup_localtype,DNAGroup);
//********************************************************************
//*** prototypes for .. DNANode
//********************************************************************
typedef  DNANode  DNANode_localtype;
Define_Module_Class(libpandadna,DNANode,DNANode_localtype,DNANode);
//********************************************************************
//*** prototypes for .. DNALandmarkBuilding
//********************************************************************
typedef  DNALandmarkBuilding  DNALandmarkBuilding_localtype;
Define_Module_Class(libpandadna,DNALandmarkBuilding,DNALandmarkBuilding_localtype,DNALandmarkBuilding);
//********************************************************************
//*** prototypes for .. DNAAnimBuilding
//********************************************************************
typedef  DNAAnimBuilding  DNAAnimBuilding_localtype;
Define_Module_Class(libpandadna,DNAAnimBuilding,DNAAnimBuilding_localtype,DNAAnimBuilding);
//********************************************************************
//*** prototypes for .. DNAProp
//********************************************************************
typedef  DNAProp  DNAProp_localtype;
Define_Module_Class(libpandadna,DNAProp,DNAProp_localtype,DNAProp);
//********************************************************************
//*** prototypes for .. DNAAnimProp
//********************************************************************
typedef  DNAAnimProp  DNAAnimProp_localtype;
Define_Module_Class(libpandadna,DNAAnimProp,DNAAnimProp_localtype,DNAAnimProp);
//********************************************************************
//*** prototypes for .. DNABattleCell
//********************************************************************
typedef  DNABattleCell  DNABattleCell_localtype;
Define_Module_Class(libpandadna,DNABattleCell,DNABattleCell_localtype,DNABattleCell);
//********************************************************************
//*** prototypes for .. DNACornice
//********************************************************************
typedef  DNACornice  DNACornice_localtype;
Define_Module_Class(libpandadna,DNACornice,DNACornice_localtype,DNACornice);
//********************************************************************
//*** prototypes for .. DNADoor
//********************************************************************
typedef  DNADoor  DNADoor_localtype;
Define_Module_Class(libpandadna,DNADoor,DNADoor_localtype,DNADoor);
//********************************************************************
//*** prototypes for .. DNAFlatBuilding
//********************************************************************
typedef  DNAFlatBuilding  DNAFlatBuilding_localtype;
Define_Module_Class(libpandadna,DNAFlatBuilding,DNAFlatBuilding_localtype,DNAFlatBuilding);
//********************************************************************
//*** prototypes for .. DNAFlatDoor
//********************************************************************
typedef  DNAFlatDoor  DNAFlatDoor_localtype;
Define_Module_Class(libpandadna,DNAFlatDoor,DNAFlatDoor_localtype,DNAFlatDoor);
//********************************************************************
//*** prototypes for .. DNAInteractiveProp
//********************************************************************
typedef  DNAInteractiveProp  DNAInteractiveProp_localtype;
Define_Module_Class(libpandadna,DNAInteractiveProp,DNAInteractiveProp_localtype,DNAInteractiveProp);
//********************************************************************
//*** prototypes for .. DNASuitPoint
//********************************************************************
typedef  DNASuitPoint  DNASuitPoint_localtype;
Define_Module_Class(libpandadna,DNASuitPoint,DNASuitPoint_localtype,DNASuitPoint);
//********************************************************************
//*** prototypes for .. DNASuitEdge
//********************************************************************
typedef  DNASuitEdge  DNASuitEdge_localtype;
Define_Module_Class(libpandadna,DNASuitEdge,DNASuitEdge_localtype,DNASuitEdge);
//********************************************************************
//*** prototypes for .. DNAStorage
//********************************************************************
typedef  DNAStorage  DNAStorage_localtype;
Define_Module_Class(libpandadna,DNAStorage,DNAStorage_localtype,DNAStorage);
//********************************************************************
//*** prototypes for .. DNALoader
//********************************************************************
typedef  DNALoader  DNALoader_localtype;
Define_Module_Class(libpandadna,DNALoader,DNALoader_localtype,DNALoader);
//********************************************************************
//*** prototypes for .. DNASign
//********************************************************************
typedef  DNASign  DNASign_localtype;
Define_Module_Class(libpandadna,DNASign,DNASign_localtype,DNASign);
//********************************************************************
//*** prototypes for .. DNASignBaseline
//********************************************************************
typedef  DNASignBaseline  DNASignBaseline_localtype;
Define_Module_Class(libpandadna,DNASignBaseline,DNASignBaseline_localtype,DNASignBaseline);
//********************************************************************
//*** prototypes for .. DNASignGraphic
//********************************************************************
typedef  DNASignGraphic  DNASignGraphic_localtype;
Define_Module_Class(libpandadna,DNASignGraphic,DNASignGraphic_localtype,DNASignGraphic);
//********************************************************************
//*** prototypes for .. DNASignText
//********************************************************************
typedef  DNASignText  DNASignText_localtype;
Define_Module_Class(libpandadna,DNASignText,DNASignText_localtype,DNASignText);
//********************************************************************
//*** prototypes for .. DNAStreet
//********************************************************************
typedef  DNAStreet  DNAStreet_localtype;
Define_Module_Class(libpandadna,DNAStreet,DNAStreet_localtype,DNAStreet);
//********************************************************************
//*** prototypes for .. DNAVisGroup
//********************************************************************
typedef  DNAVisGroup  DNAVisGroup_localtype;
Define_Module_Class(libpandadna,DNAVisGroup,DNAVisGroup_localtype,DNAVisGroup);
//********************************************************************
//*** prototypes for .. DNAWall
//********************************************************************
typedef  DNAWall  DNAWall_localtype;
Define_Module_Class(libpandadna,DNAWall,DNAWall_localtype,DNAWall);
//********************************************************************
//*** prototypes for .. DNAWindows
//********************************************************************
typedef  DNAWindows  DNAWindows_localtype;
Define_Module_Class(libpandadna,DNAWindows,DNAWindows_localtype,DNAWindows);
//********************************************************************
//*** prototypes for .. Extrernal Objects 
//********************************************************************
IMPORT_THIS struct   Dtool_PyTypedObject Dtool_Filename;
IMPORT_THIS struct   Dtool_PyTypedObject Dtool_LVector3f;
IMPORT_THIS struct   Dtool_PyTypedObject Dtool_NodePath;
IMPORT_THIS struct   Dtool_PyTypedObject Dtool_TextFont;
IMPORT_THIS struct   Dtool_PyTypedObject Dtool_Texture;

//********************************************************************
//*** Functions for .. Global 
//********************************************************************
//********************************************************************
//*** Functions for .. DNAGroup 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNAGroup::DNAGroup(void)
 *******************************************************************/
int  Dtool_Init_DNAGroup(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNAGroup::DNAGroup(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNAGroup", key_word_list))
        {
            DNAGroup *return_value = new DNAGroup();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNAGroup,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNAGroup()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNAGroup(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNAGroup)
    {
        printf("DNAGroup ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNAGroup * local_this = (DNAGroup *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNAGroup)
        return local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNAGroup(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNAGroup)
        return from_this;
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNANode 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNANode::DNANode(void)
 *******************************************************************/
int  Dtool_Init_DNANode(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNANode::DNANode(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNANode", key_word_list))
        {
            DNANode *return_value = new DNANode();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNANode,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNANode()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNANode(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNANode)
    {
        printf("DNANode ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNANode * local_this = (DNANode *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNANode)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNANode(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNANode)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNANode*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNALandmarkBuilding 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNALandmarkBuilding::DNALandmarkBuilding(void)
 *******************************************************************/
int  Dtool_Init_DNALandmarkBuilding(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNALandmarkBuilding::DNALandmarkBuilding(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNALandmarkBuilding", key_word_list))
        {
            DNALandmarkBuilding *return_value = new DNALandmarkBuilding();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNALandmarkBuilding,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNALandmarkBuilding()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNALandmarkBuilding(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNALandmarkBuilding)
    {
        printf("DNALandmarkBuilding ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNALandmarkBuilding * local_this = (DNALandmarkBuilding *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNALandmarkBuilding)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *)( DNANode *) local_this;
    if(requested_type == &Dtool_DNANode)
        return ( DNANode *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNALandmarkBuilding(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNALandmarkBuilding)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNALandmarkBuilding*)other_this;
    }
    if(from_type == &Dtool_DNANode)
    {
          DNANode* other_this = (DNANode*)from_this;
          return (DNALandmarkBuilding*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNAAnimBuilding 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNAAnimBuilding::DNAAnimBuilding(void)
 *******************************************************************/
int  Dtool_Init_DNAAnimBuilding(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNAAnimBuilding::DNAAnimBuilding(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNAAnimBuilding", key_word_list))
        {
            DNAAnimBuilding *return_value = new DNAAnimBuilding();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNAAnimBuilding,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNAAnimBuilding()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNAAnimBuilding(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNAAnimBuilding)
    {
        printf("DNAAnimBuilding ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNAAnimBuilding * local_this = (DNAAnimBuilding *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNAAnimBuilding)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *)( DNANode *)( DNALandmarkBuilding *) local_this;
    if(requested_type == &Dtool_DNALandmarkBuilding)
        return ( DNALandmarkBuilding *) local_this;
    if(requested_type == &Dtool_DNANode)
        return ( DNANode *)( DNALandmarkBuilding *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNAAnimBuilding(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNAAnimBuilding)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNAAnimBuilding*)other_this;
    }
    if(from_type == &Dtool_DNALandmarkBuilding)
    {
          DNALandmarkBuilding* other_this = (DNALandmarkBuilding*)from_this;
          return (DNAAnimBuilding*)other_this;
    }
    if(from_type == &Dtool_DNANode)
    {
          DNANode* other_this = (DNANode*)from_this;
          return (DNAAnimBuilding*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNAProp 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNAProp::DNAProp(void)
 *******************************************************************/
int  Dtool_Init_DNAProp(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNAProp::DNAProp(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNAProp", key_word_list))
        {
            DNAProp *return_value = new DNAProp();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNAProp,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNAProp()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNAProp(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNAProp)
    {
        printf("DNAProp ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNAProp * local_this = (DNAProp *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNAProp)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *)( DNANode *) local_this;
    if(requested_type == &Dtool_DNANode)
        return ( DNANode *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNAProp(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNAProp)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNAProp*)other_this;
    }
    if(from_type == &Dtool_DNANode)
    {
          DNANode* other_this = (DNANode*)from_this;
          return (DNAProp*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNAAnimProp 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNAAnimProp::DNAAnimProp(void)
 *******************************************************************/
int  Dtool_Init_DNAAnimProp(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNAAnimProp::DNAAnimProp(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNAAnimProp", key_word_list))
        {
            DNAAnimProp *return_value = new DNAAnimProp();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNAAnimProp,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNAAnimProp()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNAAnimProp(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNAAnimProp)
    {
        printf("DNAAnimProp ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNAAnimProp * local_this = (DNAAnimProp *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNAAnimProp)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *)( DNANode *)( DNAProp *) local_this;
    if(requested_type == &Dtool_DNANode)
        return ( DNANode *)( DNAProp *) local_this;
    if(requested_type == &Dtool_DNAProp)
        return ( DNAProp *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNAAnimProp(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNAAnimProp)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNAAnimProp*)other_this;
    }
    if(from_type == &Dtool_DNANode)
    {
          DNANode* other_this = (DNANode*)from_this;
          return (DNAAnimProp*)other_this;
    }
    if(from_type == &Dtool_DNAProp)
    {
          DNAProp* other_this = (DNAProp*)from_this;
          return (DNAAnimProp*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNABattleCell 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * void DNABattleCell::set_width(unsigned char width)
 *******************************************************************/
static PyObject *Dtool_DNABattleCell_set_width_22(PyObject *self, PyObject *args,PyObject *kwds) {
    DNABattleCell * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNABattleCell,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNABattleCell::set_width(unsigned char width)
        PyObject *param1;
        static char * key_word_list[] = {(char *)"width", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "O:set_width", key_word_list, &param1));
        else
            (PyArg_Parse(args, "O:set_width", &param1));
        if(!PyErr_Occurred())
        {
             PyObject *param1_uint = PyNumber_Long(param1);
            if (!((param1_uint == NULL)))
            {
                (local_this)->set_width(PyLong_AsUnsignedLong(param1_uint));
                 Py_XDECREF(param1_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  return Py_BuildValue("");
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNABattleCell.set_width() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "set_width(non-const DNABattleCell this, unsigned int width)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNABattleCell_set_width_22_comment =
    "C++ Interface:\n"
    "set_width(non-const DNABattleCell this, unsigned int width)\n"
    "\n"
    "";
#else
static const char * Dtool_DNABattleCell_set_width_22_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNABattleCell::set_height(unsigned char height)
 *******************************************************************/
static PyObject *Dtool_DNABattleCell_set_height_23(PyObject *self, PyObject *args,PyObject *kwds) {
    DNABattleCell * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNABattleCell,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNABattleCell::set_height(unsigned char height)
        PyObject *param1;
        static char * key_word_list[] = {(char *)"height", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "O:set_height", key_word_list, &param1));
        else
            (PyArg_Parse(args, "O:set_height", &param1));
        if(!PyErr_Occurred())
        {
             PyObject *param1_uint = PyNumber_Long(param1);
            if (!((param1_uint == NULL)))
            {
                (local_this)->set_height(PyLong_AsUnsignedLong(param1_uint));
                 Py_XDECREF(param1_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  return Py_BuildValue("");
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNABattleCell.set_height() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "set_height(non-const DNABattleCell this, unsigned int height)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNABattleCell_set_height_23_comment =
    "C++ Interface:\n"
    "set_height(non-const DNABattleCell this, unsigned int height)\n"
    "\n"
    "";
#else
static const char * Dtool_DNABattleCell_set_height_23_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNABattleCell::set_width_height(unsigned char width, unsigned char height)
 *******************************************************************/
static PyObject *Dtool_DNABattleCell_set_width_height_24(PyObject *self, PyObject *args,PyObject *kwds) {
    DNABattleCell * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNABattleCell,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNABattleCell::set_width_height(unsigned char width, unsigned char height)
        PyObject *param1;
        PyObject *param2;
        static char * key_word_list[] = {(char *)"width", (char *)"height", NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, "OO:set_width_height", key_word_list, &param1, &param2))
        {
             PyObject *param1_uint = PyNumber_Long(param1); PyObject *param2_uint = PyNumber_Long(param2);
            if (!((param1_uint == NULL)|| (param2_uint == NULL)))
            {
                (local_this)->set_width_height(PyLong_AsUnsignedLong(param1_uint), PyLong_AsUnsignedLong(param2_uint));
                 Py_XDECREF(param1_uint); Py_XDECREF(param2_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  return Py_BuildValue("");
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNABattleCell.set_width_height() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "set_width_height(non-const DNABattleCell this, unsigned int width, unsigned int height)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNABattleCell_set_width_height_24_comment =
    "C++ Interface:\n"
    "set_width_height(non-const DNABattleCell this, unsigned int width, unsigned int height)\n"
    "\n"
    "";
#else
static const char * Dtool_DNABattleCell_set_width_height_24_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNABattleCell::set_pos(LVector3f *pos)
 *******************************************************************/
static PyObject *Dtool_DNABattleCell_set_pos_25(PyObject *self, PyObject *args,PyObject *kwds) {
    DNABattleCell * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNABattleCell,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    {
      PyObject *coerced = NULL;
      PyObject **coerced_ptr = NULL;
      bool report_errors = false;
      while (true) {
        if (!((Dtool_PyInstDef *)self)->_is_const) {
          // 1-void DNABattleCell::set_pos(LVector3f *pos)
            PyObject *param1;
            static char * key_word_list[] = {(char *)"pos", NULL};
            // Special Case to Make operator work 
            if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
                (PyArg_ParseTupleAndKeywords(args,kwds, "O:set_pos", key_word_list, &param1));
            else
                (PyArg_Parse(args, "O:set_pos", &param1));
            if(!PyErr_Occurred())
            {
                LVector3f *param1_this = (LVector3f *)DTOOL_Call_GetPointerThisClass(param1, &Dtool_LVector3f, 1, "DNABattleCell.set_pos", 0, coerced_ptr, report_errors);

                if (!((param1_this == NULL)))
                {
                    (local_this)->set_pos(param1_this);
                    Py_XDECREF(coerced);
                    if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                      // TypeError raised; continue to next overload type.
                    } else {
#ifndef NDEBUG
                      Notify *notify = Notify::ptr();
                      if (notify->has_assert_failed()) {
                        PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                        notify->clear_assert_failed();
                        return (PyObject *)NULL;
                      }
#endif
                      if (PyErr_Occurred()) {
                        return (PyObject *)NULL;
                      }
                      return Py_BuildValue("");
                    }
                }
            }
        } else {
          PyErr_SetString(PyExc_TypeError,
                          "Cannot call DNABattleCell.set_pos() on a const object.");
          return (PyObject *) NULL;
        }

        if (coerced_ptr == NULL && !report_errors) {
          coerced_ptr = &coerced;
          continue;
        }
        if (!report_errors) {
          report_errors = true;
          continue;
        }
        break;
      }
      Py_XDECREF(coerced);
    }
    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "set_pos(non-const DNABattleCell this, non-const LVector3f pos)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNABattleCell_set_pos_25_comment =
    "C++ Interface:\n"
    "set_pos(non-const DNABattleCell this, non-const LVector3f pos)\n"
    "\n"
    "";
#else
static const char * Dtool_DNABattleCell_set_pos_25_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * unsigned char DNABattleCell::get_width(void)
 *******************************************************************/
static PyObject *Dtool_DNABattleCell_get_width_26(PyObject *self, PyObject *args,PyObject *kwds) {
    DNABattleCell * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNABattleCell,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-unsigned char DNABattleCell::get_width(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":get_width", key_word_list));
        else
            (PyArg_Parse(args, ":get_width"));
        if(!PyErr_Occurred())
        {
            unsigned char return_value = (local_this)->get_width();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return PyLongOrInt_FromUnsignedLong(return_value);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNABattleCell.get_width() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_width(non-const DNABattleCell this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNABattleCell_get_width_26_comment =
    "C++ Interface:\n"
    "get_width(non-const DNABattleCell this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNABattleCell_get_width_26_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * unsigned char DNABattleCell::get_height(void)
 *******************************************************************/
static PyObject *Dtool_DNABattleCell_get_height_27(PyObject *self, PyObject *args,PyObject *kwds) {
    DNABattleCell * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNABattleCell,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-unsigned char DNABattleCell::get_height(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":get_height", key_word_list));
        else
            (PyArg_Parse(args, ":get_height"));
        if(!PyErr_Occurred())
        {
            unsigned char return_value = (local_this)->get_height();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return PyLongOrInt_FromUnsignedLong(return_value);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNABattleCell.get_height() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_height(non-const DNABattleCell this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNABattleCell_get_height_27_comment =
    "C++ Interface:\n"
    "get_height(non-const DNABattleCell this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNABattleCell_get_height_27_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * LVector3f *DNABattleCell::get_pos(void)
 *******************************************************************/
static PyObject *Dtool_DNABattleCell_get_pos_28(PyObject *self, PyObject *args,PyObject *kwds) {
    DNABattleCell * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNABattleCell,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-LVector3f *DNABattleCell::get_pos(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":get_pos", key_word_list));
        else
            (PyArg_Parse(args, ":get_pos"));
        if(!PyErr_Occurred())
        {
            LVector3f *return_value = (local_this)->get_pos();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              if(return_value == NULL)
              {
                  Py_INCREF(Py_None);
                  return Py_None;
              }
              return DTool_CreatePyInstance((void *)return_value,Dtool_LVector3f,false, false);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNABattleCell.get_pos() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_pos(non-const DNABattleCell this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNABattleCell_get_pos_28_comment =
    "C++ Interface:\n"
    "get_pos(non-const DNABattleCell this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNABattleCell_get_pos_28_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * DNABattleCell::DNABattleCell(void)
 *******************************************************************/
int  Dtool_Init_DNABattleCell(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNABattleCell::DNABattleCell(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNABattleCell", key_word_list))
        {
            DNABattleCell *return_value = new DNABattleCell();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNABattleCell,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNABattleCell()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNABattleCell(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNABattleCell)
    {
        printf("DNABattleCell ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNABattleCell * local_this = (DNABattleCell *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNABattleCell)
        return local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNABattleCell(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNABattleCell)
        return from_this;
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNACornice 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNACornice::DNACornice(void)
 *******************************************************************/
int  Dtool_Init_DNACornice(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNACornice::DNACornice(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNACornice", key_word_list))
        {
            DNACornice *return_value = new DNACornice();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNACornice,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNACornice()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNACornice(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNACornice)
    {
        printf("DNACornice ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNACornice * local_this = (DNACornice *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNACornice)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNACornice(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNACornice)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNACornice*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNADoor 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNADoor::DNADoor(void)
 *******************************************************************/
int  Dtool_Init_DNADoor(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNADoor::DNADoor(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNADoor", key_word_list))
        {
            DNADoor *return_value = new DNADoor();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNADoor,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNADoor()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNADoor(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNADoor)
    {
        printf("DNADoor ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNADoor * local_this = (DNADoor *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNADoor)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNADoor(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNADoor)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNADoor*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNAFlatBuilding 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNAFlatBuilding::DNAFlatBuilding(void)
 *******************************************************************/
int  Dtool_Init_DNAFlatBuilding(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNAFlatBuilding::DNAFlatBuilding(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNAFlatBuilding", key_word_list))
        {
            DNAFlatBuilding *return_value = new DNAFlatBuilding();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNAFlatBuilding,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNAFlatBuilding()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNAFlatBuilding(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNAFlatBuilding)
    {
        printf("DNAFlatBuilding ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNAFlatBuilding * local_this = (DNAFlatBuilding *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNAFlatBuilding)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *)( DNANode *) local_this;
    if(requested_type == &Dtool_DNANode)
        return ( DNANode *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNAFlatBuilding(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNAFlatBuilding)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNAFlatBuilding*)other_this;
    }
    if(from_type == &Dtool_DNANode)
    {
          DNANode* other_this = (DNANode*)from_this;
          return (DNAFlatBuilding*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNAFlatDoor 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNAFlatDoor::DNAFlatDoor(void)
 *******************************************************************/
int  Dtool_Init_DNAFlatDoor(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNAFlatDoor::DNAFlatDoor(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNAFlatDoor", key_word_list))
        {
            DNAFlatDoor *return_value = new DNAFlatDoor();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNAFlatDoor,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNAFlatDoor()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNAFlatDoor(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNAFlatDoor)
    {
        printf("DNAFlatDoor ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNAFlatDoor * local_this = (DNAFlatDoor *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNAFlatDoor)
        return local_this;
    if(requested_type == &Dtool_DNADoor)
        return ( DNADoor *) local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *)( DNADoor *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNAFlatDoor(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNAFlatDoor)
        return from_this;
    if(from_type == &Dtool_DNADoor)
    {
          DNADoor* other_this = (DNADoor*)from_this;
          return (DNAFlatDoor*)other_this;
    }
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNAFlatDoor*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNAInteractiveProp 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNAInteractiveProp::DNAInteractiveProp(void)
 *******************************************************************/
int  Dtool_Init_DNAInteractiveProp(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNAInteractiveProp::DNAInteractiveProp(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNAInteractiveProp", key_word_list))
        {
            DNAInteractiveProp *return_value = new DNAInteractiveProp();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNAInteractiveProp,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNAInteractiveProp()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNAInteractiveProp(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNAInteractiveProp)
    {
        printf("DNAInteractiveProp ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNAInteractiveProp * local_this = (DNAInteractiveProp *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNAInteractiveProp)
        return local_this;
    if(requested_type == &Dtool_DNAAnimProp)
        return ( DNAAnimProp *) local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *)( DNANode *)( DNAProp *)( DNAAnimProp *) local_this;
    if(requested_type == &Dtool_DNANode)
        return ( DNANode *)( DNAProp *)( DNAAnimProp *) local_this;
    if(requested_type == &Dtool_DNAProp)
        return ( DNAProp *)( DNAAnimProp *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNAInteractiveProp(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNAInteractiveProp)
        return from_this;
    if(from_type == &Dtool_DNAAnimProp)
    {
          DNAAnimProp* other_this = (DNAAnimProp*)from_this;
          return (DNAInteractiveProp*)other_this;
    }
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNAInteractiveProp*)other_this;
    }
    if(from_type == &Dtool_DNANode)
    {
          DNANode* other_this = (DNANode*)from_this;
          return (DNAInteractiveProp*)other_this;
    }
    if(from_type == &Dtool_DNAProp)
    {
          DNAProp* other_this = (DNAProp*)from_this;
          return (DNAInteractiveProp*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNASuitPoint 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * void DNASuitPoint::set_index(unsigned char )
 *******************************************************************/
static PyObject *Dtool_DNASuitPoint_set_index_68(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitPoint * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitPoint,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNASuitPoint::set_index(unsigned char )
        PyObject *param1;
        static char * key_word_list[] = {(char *)"param0", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "O:set_index", key_word_list, &param1));
        else
            (PyArg_Parse(args, "O:set_index", &param1));
        if(!PyErr_Occurred())
        {
             PyObject *param1_uint = PyNumber_Long(param1);
            if (!((param1_uint == NULL)))
            {
                (local_this)->set_index(PyLong_AsUnsignedLong(param1_uint));
                 Py_XDECREF(param1_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  return Py_BuildValue("");
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitPoint.set_index() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "set_index(non-const DNASuitPoint this, unsigned int)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitPoint_set_index_68_comment =
    "C++ Interface:\n"
    "set_index(non-const DNASuitPoint this, unsigned int)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitPoint_set_index_68_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNASuitPoint::set_graph_id(char )
 *******************************************************************/
static PyObject *Dtool_DNASuitPoint_set_graph_id_69(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitPoint * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitPoint,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNASuitPoint::set_graph_id(char )
        int param1;
        static char * key_word_list[] = {(char *)"param0", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "i:set_graph_id", key_word_list, &param1));
        else
            (PyArg_Parse(args, "i:set_graph_id", &param1));
        if(!PyErr_Occurred())
        {
            (local_this)->set_graph_id((char)param1);
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return Py_BuildValue("");
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitPoint.set_graph_id() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "set_graph_id(non-const DNASuitPoint this, int)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitPoint_set_graph_id_69_comment =
    "C++ Interface:\n"
    "set_graph_id(non-const DNASuitPoint this, int)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitPoint_set_graph_id_69_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNASuitPoint::set_landmark_building_index(short int )
 *******************************************************************/
static PyObject *Dtool_DNASuitPoint_set_landmark_building_index_70(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitPoint * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitPoint,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNASuitPoint::set_landmark_building_index(short int )
        int param1;
        static char * key_word_list[] = {(char *)"param0", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "i:set_landmark_building_index", key_word_list, &param1));
        else
            (PyArg_Parse(args, "i:set_landmark_building_index", &param1));
        if(!PyErr_Occurred())
        {
            (local_this)->set_landmark_building_index((short int)param1);
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return Py_BuildValue("");
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitPoint.set_landmark_building_index() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "set_landmark_building_index(non-const DNASuitPoint this, int)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitPoint_set_landmark_building_index_70_comment =
    "C++ Interface:\n"
    "set_landmark_building_index(non-const DNASuitPoint this, int)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitPoint_set_landmark_building_index_70_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNASuitPoint::set_pos(LVector3f *)
 *******************************************************************/
static PyObject *Dtool_DNASuitPoint_set_pos_71(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitPoint * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitPoint,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    {
      PyObject *coerced = NULL;
      PyObject **coerced_ptr = NULL;
      bool report_errors = false;
      while (true) {
        if (!((Dtool_PyInstDef *)self)->_is_const) {
          // 1-void DNASuitPoint::set_pos(LVector3f *)
            PyObject *param1;
            static char * key_word_list[] = {(char *)"param0", NULL};
            // Special Case to Make operator work 
            if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
                (PyArg_ParseTupleAndKeywords(args,kwds, "O:set_pos", key_word_list, &param1));
            else
                (PyArg_Parse(args, "O:set_pos", &param1));
            if(!PyErr_Occurred())
            {
                LVector3f *param1_this = (LVector3f *)DTOOL_Call_GetPointerThisClass(param1, &Dtool_LVector3f, 1, "DNASuitPoint.set_pos", 0, coerced_ptr, report_errors);

                if (!((param1_this == NULL)))
                {
                    (local_this)->set_pos(param1_this);
                    Py_XDECREF(coerced);
                    if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                      // TypeError raised; continue to next overload type.
                    } else {
#ifndef NDEBUG
                      Notify *notify = Notify::ptr();
                      if (notify->has_assert_failed()) {
                        PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                        notify->clear_assert_failed();
                        return (PyObject *)NULL;
                      }
#endif
                      if (PyErr_Occurred()) {
                        return (PyObject *)NULL;
                      }
                      return Py_BuildValue("");
                    }
                }
            }
        } else {
          PyErr_SetString(PyExc_TypeError,
                          "Cannot call DNASuitPoint.set_pos() on a const object.");
          return (PyObject *) NULL;
        }

        if (coerced_ptr == NULL && !report_errors) {
          coerced_ptr = &coerced;
          continue;
        }
        if (!report_errors) {
          report_errors = true;
          continue;
        }
        break;
      }
      Py_XDECREF(coerced);
    }
    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "set_pos(non-const DNASuitPoint this, non-const LVector3f)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitPoint_set_pos_71_comment =
    "C++ Interface:\n"
    "set_pos(non-const DNASuitPoint this, non-const LVector3f)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitPoint_set_pos_71_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNASuitPoint::set_point_type(char const *)
 * void DNASuitPoint::set_point_type(unsigned short int )
 *******************************************************************/
static PyObject *Dtool_DNASuitPoint_set_point_type_72(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitPoint * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitPoint,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // -2 void DNASuitPoint::set_point_type(char const *)
        char *param1;
        static char * key_word_list[] = {(char *)"param0", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "s:set_point_type", key_word_list, &param1));
        else
            (PyArg_Parse(args, "s:set_point_type", &param1));
        if(!PyErr_Occurred())
        {
            (local_this)->set_point_type((char const *)param1);
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return Py_BuildValue("");
            }
        }
        PyErr_Clear(); 
    }

    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // -2 void DNASuitPoint::set_point_type(unsigned short int )
        PyObject *param1;
        static char * key_word_list[] = {(char *)"param0", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "O:set_point_type", key_word_list, &param1));
        else
            (PyArg_Parse(args, "O:set_point_type", &param1));
        if(!PyErr_Occurred())
        {
             PyObject *param1_uint = PyNumber_Long(param1);
            if (!((param1_uint == NULL)))
            {
                (local_this)->set_point_type(PyLong_AsUnsignedLong(param1_uint));
                 Py_XDECREF(param1_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  return Py_BuildValue("");
                }
            }
        }
        PyErr_Clear(); 
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "set_point_type(non-const DNASuitPoint this, string)\n"
          "set_point_type(non-const DNASuitPoint this, unsigned int)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitPoint_set_point_type_72_comment =
    "C++ Interface:\n"
    "set_point_type(non-const DNASuitPoint this, string)\n"
    "set_point_type(non-const DNASuitPoint this, unsigned int)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitPoint_set_point_type_72_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * unsigned char DNASuitPoint::get_index(void)
 *******************************************************************/
static PyObject *Dtool_DNASuitPoint_get_index_73(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitPoint * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitPoint,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-unsigned char DNASuitPoint::get_index(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":get_index", key_word_list));
        else
            (PyArg_Parse(args, ":get_index"));
        if(!PyErr_Occurred())
        {
            unsigned char return_value = (local_this)->get_index();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return PyLongOrInt_FromUnsignedLong(return_value);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitPoint.get_index() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_index(non-const DNASuitPoint this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitPoint_get_index_73_comment =
    "C++ Interface:\n"
    "get_index(non-const DNASuitPoint this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitPoint_get_index_73_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * char DNASuitPoint::get_graph_id(void)
 *******************************************************************/
static PyObject *Dtool_DNASuitPoint_get_graph_id_74(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitPoint * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitPoint,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-char DNASuitPoint::get_graph_id(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":get_graph_id", key_word_list));
        else
            (PyArg_Parse(args, ":get_graph_id"));
        if(!PyErr_Occurred())
        {
            char return_value = (local_this)->get_graph_id();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return PyInt_FromLong(return_value);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitPoint.get_graph_id() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_graph_id(non-const DNASuitPoint this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitPoint_get_graph_id_74_comment =
    "C++ Interface:\n"
    "get_graph_id(non-const DNASuitPoint this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitPoint_get_graph_id_74_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * short int DNASuitPoint::get_landmark_building_index(void)
 *******************************************************************/
static PyObject *Dtool_DNASuitPoint_get_landmark_building_index_75(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitPoint * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitPoint,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-short int DNASuitPoint::get_landmark_building_index(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":get_landmark_building_index", key_word_list));
        else
            (PyArg_Parse(args, ":get_landmark_building_index"));
        if(!PyErr_Occurred())
        {
            short int return_value = (local_this)->get_landmark_building_index();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return PyInt_FromLong(return_value);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitPoint.get_landmark_building_index() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_landmark_building_index(non-const DNASuitPoint this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitPoint_get_landmark_building_index_75_comment =
    "C++ Interface:\n"
    "get_landmark_building_index(non-const DNASuitPoint this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitPoint_get_landmark_building_index_75_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * LVector3f *DNASuitPoint::get_pos(void)
 *******************************************************************/
static PyObject *Dtool_DNASuitPoint_get_pos_76(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitPoint * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitPoint,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-LVector3f *DNASuitPoint::get_pos(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":get_pos", key_word_list));
        else
            (PyArg_Parse(args, ":get_pos"));
        if(!PyErr_Occurred())
        {
            LVector3f *return_value = (local_this)->get_pos();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              if(return_value == NULL)
              {
                  Py_INCREF(Py_None);
                  return Py_None;
              }
              return DTool_CreatePyInstance((void *)return_value,Dtool_LVector3f,false, false);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitPoint.get_pos() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_pos(non-const DNASuitPoint this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitPoint_get_pos_76_comment =
    "C++ Interface:\n"
    "get_pos(non-const DNASuitPoint this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitPoint_get_pos_76_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * unsigned short int DNASuitPoint::get_point_type(void)
 *******************************************************************/
static PyObject *Dtool_DNASuitPoint_get_point_type_77(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitPoint * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitPoint,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-unsigned short int DNASuitPoint::get_point_type(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":get_point_type", key_word_list));
        else
            (PyArg_Parse(args, ":get_point_type"));
        if(!PyErr_Occurred())
        {
            unsigned short int return_value = (local_this)->get_point_type();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return PyLongOrInt_FromUnsignedLong(return_value);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitPoint.get_point_type() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_point_type(non-const DNASuitPoint this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitPoint_get_point_type_77_comment =
    "C++ Interface:\n"
    "get_point_type(non-const DNASuitPoint this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitPoint_get_point_type_77_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * DNASuitPoint::DNASuitPoint(unsigned short int , unsigned char , LVector3f *, short int )
 *******************************************************************/
int  Dtool_Init_DNASuitPoint(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      PyObject *coerced = NULL;
      PyObject **coerced_ptr = NULL;
      bool report_errors = false;
      while (true) {
        {
          // 1-DNASuitPoint::DNASuitPoint(unsigned short int , unsigned char , LVector3f *, short int )
            PyObject *param0;
            PyObject *param1;
            PyObject *param2;
            int param3;
            static char * key_word_list[] = {(char *)"param0", (char *)"param1", (char *)"param2", (char *)"param3", NULL};
            if (PyArg_ParseTupleAndKeywords(args,kwds, "OOOi:DNASuitPoint", key_word_list, &param0, &param1, &param2, &param3))
            {
                 PyObject *param0_uint = PyNumber_Long(param0); PyObject *param1_uint = PyNumber_Long(param1);LVector3f *param2_this = (LVector3f *)DTOOL_Call_GetPointerThisClass(param2, &Dtool_LVector3f, 2, "DNASuitPoint.DNASuitPoint", 0, coerced_ptr, report_errors);

                if (!((param0_uint == NULL)|| (param1_uint == NULL)|| (param2_this == NULL)))
                {
                    DNASuitPoint *return_value = new DNASuitPoint(PyLong_AsUnsignedLong(param0_uint), PyLong_AsUnsignedLong(param1_uint), param2_this, (short int)param3);
                     Py_XDECREF(param0_uint); Py_XDECREF(param1_uint);
                    Py_XDECREF(coerced);
                    if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                      // TypeError raised; continue to next overload type.
                      delete return_value;
                    } else {
#ifndef NDEBUG
                      Notify *notify = Notify::ptr();
                      if (notify->has_assert_failed()) {
                        PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                        notify->clear_assert_failed();
                        delete return_value;
                        return -1;
                      }
#endif
                      if (PyErr_Occurred()) {
                        delete return_value;
                        return -1;
                      }
                      return DTool_PyInit_Finalize(self, return_value,&Dtool_DNASuitPoint,true,false);
                    }
                }
            }
        }

        if (coerced_ptr == NULL && !report_errors) {
          coerced_ptr = &coerced;
          continue;
        }
        if (!report_errors) {
          report_errors = true;
          continue;
        }
        break;
      }
      Py_XDECREF(coerced);
    }
    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNASuitPoint(unsigned int, unsigned int, non-const LVector3f, int)\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNASuitPoint(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNASuitPoint)
    {
        printf("DNASuitPoint ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNASuitPoint * local_this = (DNASuitPoint *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNASuitPoint)
        return local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNASuitPoint(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNASuitPoint)
        return from_this;
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNASuitEdge 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * void DNASuitEdge::set_start_point(unsigned short int start_point)
 *******************************************************************/
static PyObject *Dtool_DNASuitEdge_set_start_point_81(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitEdge * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitEdge,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNASuitEdge::set_start_point(unsigned short int start_point)
        PyObject *param1;
        static char * key_word_list[] = {(char *)"start_point", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "O:set_start_point", key_word_list, &param1));
        else
            (PyArg_Parse(args, "O:set_start_point", &param1));
        if(!PyErr_Occurred())
        {
             PyObject *param1_uint = PyNumber_Long(param1);
            if (!((param1_uint == NULL)))
            {
                (local_this)->set_start_point(PyLong_AsUnsignedLong(param1_uint));
                 Py_XDECREF(param1_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  return Py_BuildValue("");
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitEdge.set_start_point() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "set_start_point(non-const DNASuitEdge this, unsigned int start_point)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitEdge_set_start_point_81_comment =
    "C++ Interface:\n"
    "set_start_point(non-const DNASuitEdge this, unsigned int start_point)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitEdge_set_start_point_81_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNASuitEdge::set_end_point(unsigned short int end_point)
 *******************************************************************/
static PyObject *Dtool_DNASuitEdge_set_end_point_82(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitEdge * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitEdge,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNASuitEdge::set_end_point(unsigned short int end_point)
        PyObject *param1;
        static char * key_word_list[] = {(char *)"end_point", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "O:set_end_point", key_word_list, &param1));
        else
            (PyArg_Parse(args, "O:set_end_point", &param1));
        if(!PyErr_Occurred())
        {
             PyObject *param1_uint = PyNumber_Long(param1);
            if (!((param1_uint == NULL)))
            {
                (local_this)->set_end_point(PyLong_AsUnsignedLong(param1_uint));
                 Py_XDECREF(param1_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  return Py_BuildValue("");
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitEdge.set_end_point() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "set_end_point(non-const DNASuitEdge this, unsigned int end_point)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitEdge_set_end_point_82_comment =
    "C++ Interface:\n"
    "set_end_point(non-const DNASuitEdge this, unsigned int end_point)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitEdge_set_end_point_82_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNASuitEdge::set_zone_id(unsigned short int zone_id)
 *******************************************************************/
static PyObject *Dtool_DNASuitEdge_set_zone_id_83(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitEdge * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitEdge,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNASuitEdge::set_zone_id(unsigned short int zone_id)
        PyObject *param1;
        static char * key_word_list[] = {(char *)"zone_id", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "O:set_zone_id", key_word_list, &param1));
        else
            (PyArg_Parse(args, "O:set_zone_id", &param1));
        if(!PyErr_Occurred())
        {
             PyObject *param1_uint = PyNumber_Long(param1);
            if (!((param1_uint == NULL)))
            {
                (local_this)->set_zone_id(PyLong_AsUnsignedLong(param1_uint));
                 Py_XDECREF(param1_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  return Py_BuildValue("");
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitEdge.set_zone_id() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "set_zone_id(non-const DNASuitEdge this, unsigned int zone_id)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitEdge_set_zone_id_83_comment =
    "C++ Interface:\n"
    "set_zone_id(non-const DNASuitEdge this, unsigned int zone_id)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitEdge_set_zone_id_83_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * unsigned short int DNASuitEdge::get_start_point(void)
 *******************************************************************/
static PyObject *Dtool_DNASuitEdge_get_start_point_84(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitEdge * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitEdge,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-unsigned short int DNASuitEdge::get_start_point(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":get_start_point", key_word_list));
        else
            (PyArg_Parse(args, ":get_start_point"));
        if(!PyErr_Occurred())
        {
            unsigned short int return_value = (local_this)->get_start_point();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return PyLongOrInt_FromUnsignedLong(return_value);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitEdge.get_start_point() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_start_point(non-const DNASuitEdge this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitEdge_get_start_point_84_comment =
    "C++ Interface:\n"
    "get_start_point(non-const DNASuitEdge this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitEdge_get_start_point_84_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * unsigned short int DNASuitEdge::get_end_point(void)
 *******************************************************************/
static PyObject *Dtool_DNASuitEdge_get_end_point_85(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitEdge * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitEdge,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-unsigned short int DNASuitEdge::get_end_point(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":get_end_point", key_word_list));
        else
            (PyArg_Parse(args, ":get_end_point"));
        if(!PyErr_Occurred())
        {
            unsigned short int return_value = (local_this)->get_end_point();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return PyLongOrInt_FromUnsignedLong(return_value);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitEdge.get_end_point() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_end_point(non-const DNASuitEdge this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitEdge_get_end_point_85_comment =
    "C++ Interface:\n"
    "get_end_point(non-const DNASuitEdge this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitEdge_get_end_point_85_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * unsigned short int DNASuitEdge::get_zone_id(void)
 *******************************************************************/
static PyObject *Dtool_DNASuitEdge_get_zone_id_86(PyObject *self, PyObject *args,PyObject *kwds) {
    DNASuitEdge * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNASuitEdge,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-unsigned short int DNASuitEdge::get_zone_id(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":get_zone_id", key_word_list));
        else
            (PyArg_Parse(args, ":get_zone_id"));
        if(!PyErr_Occurred())
        {
            unsigned short int return_value = (local_this)->get_zone_id();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return PyLongOrInt_FromUnsignedLong(return_value);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNASuitEdge.get_zone_id() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_zone_id(non-const DNASuitEdge this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNASuitEdge_get_zone_id_86_comment =
    "C++ Interface:\n"
    "get_zone_id(non-const DNASuitEdge this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNASuitEdge_get_zone_id_86_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * DNASuitEdge::DNASuitEdge(void)
 *******************************************************************/
int  Dtool_Init_DNASuitEdge(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNASuitEdge::DNASuitEdge(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNASuitEdge", key_word_list))
        {
            DNASuitEdge *return_value = new DNASuitEdge();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNASuitEdge,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNASuitEdge()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNASuitEdge(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNASuitEdge)
    {
        printf("DNASuitEdge ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNASuitEdge * local_this = (DNASuitEdge *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNASuitEdge)
        return local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNASuitEdge(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNASuitEdge)
        return from_this;
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNAStorage 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * void DNAStorage::store_catalog_code(basic_string< char > const &root, basic_string< char > const &code)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_store_catalog_code_90(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNAStorage::store_catalog_code(basic_string< char > const &root, basic_string< char > const &code)
        char *param1_str; int param1_len;
        char *param2_str; int param2_len;
        static char * key_word_list[] = {(char *)"root", (char *)"code", NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, "s#s#:store_catalog_code", key_word_list, &param1_str, &param1_len, &param2_str, &param2_len))
        {
            (local_this)->store_catalog_code(basic_string<char>(param1_str, param1_len), basic_string<char>(param2_str, param2_len));
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return Py_BuildValue("");
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.store_catalog_code() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "store_catalog_code(non-const DNAStorage this, string root, string code)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_store_catalog_code_90_comment =
    "C++ Interface:\n"
    "store_catalog_code(non-const DNAStorage this, string root, string code)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_store_catalog_code_90_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * basic_string< char > DNAStorage::get_catalog_code(basic_string< char > const &category, unsigned int index)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_get_catalog_code_91(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-basic_string< char > DNAStorage::get_catalog_code(basic_string< char > const &category, unsigned int index)
        char *param1_str; int param1_len;
        PyObject *param2;
        static char * key_word_list[] = {(char *)"category", (char *)"index", NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, "s#O:get_catalog_code", key_word_list, &param1_str, &param1_len, &param2))
        {
             PyObject *param2_uint = PyNumber_Long(param2);
            if (!((param2_uint == NULL)))
            {
                basic_string< char > return_value = (local_this)->get_catalog_code(basic_string<char>(param1_str, param1_len), PyLong_AsUnsignedLong(param2_uint));
                 Py_XDECREF(param2_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  return PyString_FromStringAndSize(return_value.data(), (int)return_value.length());
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.get_catalog_code() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_catalog_code(non-const DNAStorage this, string category, unsigned int index)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_get_catalog_code_91_comment =
    "C++ Interface:\n"
    "get_catalog_code(non-const DNAStorage this, string category, unsigned int index)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_get_catalog_code_91_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * int DNAStorage::get_num_catalog_codes(basic_string< char > const &category)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_get_num_catalog_codes_92(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-int DNAStorage::get_num_catalog_codes(basic_string< char > const &category)
        char *param1_str; int param1_len;
        static char * key_word_list[] = {(char *)"category", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "s#:get_num_catalog_codes", key_word_list, &param1_str, &param1_len));
        else
            (PyArg_Parse(args, "s#:get_num_catalog_codes", &param1_str, &param1_len));
        if(!PyErr_Occurred())
        {
            int return_value = (local_this)->get_num_catalog_codes(basic_string<char>(param1_str, param1_len));
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return PyInt_FromLong(return_value);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.get_num_catalog_codes() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_num_catalog_codes(non-const DNAStorage this, string category)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_get_num_catalog_codes_92_comment =
    "C++ Interface:\n"
    "get_num_catalog_codes(non-const DNAStorage this, string category)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_get_num_catalog_codes_92_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNAStorage::store_texture(basic_string< char > const &code, Texture *texture)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_store_texture_93(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    {
      PyObject *coerced = NULL;
      PyObject **coerced_ptr = NULL;
      bool report_errors = false;
      while (true) {
        if (!((Dtool_PyInstDef *)self)->_is_const) {
          // 1-void DNAStorage::store_texture(basic_string< char > const &code, Texture *texture)
            char *param1_str; int param1_len;
            PyObject *param2;
            static char * key_word_list[] = {(char *)"code", (char *)"texture", NULL};
            if (PyArg_ParseTupleAndKeywords(args,kwds, "s#O:store_texture", key_word_list, &param1_str, &param1_len, &param2))
            {
                Texture *param2_this = (Texture *)DTOOL_Call_GetPointerThisClass(param2, &Dtool_Texture, 2, "DNAStorage.store_texture", 0, coerced_ptr, report_errors);

                if (!((param2_this == NULL)))
                {
                    (local_this)->store_texture(basic_string<char>(param1_str, param1_len), param2_this);
                    Py_XDECREF(coerced);
                    if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                      // TypeError raised; continue to next overload type.
                    } else {
#ifndef NDEBUG
                      Notify *notify = Notify::ptr();
                      if (notify->has_assert_failed()) {
                        PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                        notify->clear_assert_failed();
                        return (PyObject *)NULL;
                      }
#endif
                      if (PyErr_Occurred()) {
                        return (PyObject *)NULL;
                      }
                      return Py_BuildValue("");
                    }
                }
            }
        } else {
          PyErr_SetString(PyExc_TypeError,
                          "Cannot call DNAStorage.store_texture() on a const object.");
          return (PyObject *) NULL;
        }

        if (coerced_ptr == NULL && !report_errors) {
          coerced_ptr = &coerced;
          continue;
        }
        if (!report_errors) {
          report_errors = true;
          continue;
        }
        break;
      }
      Py_XDECREF(coerced);
    }
    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "store_texture(non-const DNAStorage this, string code, non-const Texture texture)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_store_texture_93_comment =
    "C++ Interface:\n"
    "store_texture(non-const DNAStorage this, string code, non-const Texture texture)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_store_texture_93_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * Texture *DNAStorage::find_texture(basic_string< char > const &code)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_find_texture_94(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-Texture *DNAStorage::find_texture(basic_string< char > const &code)
        char *param1_str; int param1_len;
        static char * key_word_list[] = {(char *)"code", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "s#:find_texture", key_word_list, &param1_str, &param1_len));
        else
            (PyArg_Parse(args, "s#:find_texture", &param1_str, &param1_len));
        if(!PyErr_Occurred())
        {
            Texture *return_value = (local_this)->find_texture(basic_string<char>(param1_str, param1_len));
            if (return_value != (Texture *)0) {
              return_value->ref();
            }
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              if(return_value == NULL)
              {
                  Py_INCREF(Py_None);
                  return Py_None;
              }
              return DTool_CreatePyInstanceTyped((void *)return_value,Dtool_Texture,true, false, (return_value)->as_typed_object()->get_type_index());
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.find_texture() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "find_texture(non-const DNAStorage this, string code)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_find_texture_94_comment =
    "C++ Interface:\n"
    "find_texture(non-const DNAStorage this, string code)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_find_texture_94_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNAStorage::reset_textures(void)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_reset_textures_95(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNAStorage::reset_textures(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":reset_textures", key_word_list));
        else
            (PyArg_Parse(args, ":reset_textures"));
        if(!PyErr_Occurred())
        {
            (local_this)->reset_textures();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return Py_BuildValue("");
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.reset_textures() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "reset_textures(non-const DNAStorage this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_reset_textures_95_comment =
    "C++ Interface:\n"
    "reset_textures(non-const DNAStorage this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_reset_textures_95_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNAStorage::store_font(basic_string< char > const &code, TextFont *font)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_store_font_96(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    {
      PyObject *coerced = NULL;
      PyObject **coerced_ptr = NULL;
      bool report_errors = false;
      while (true) {
        if (!((Dtool_PyInstDef *)self)->_is_const) {
          // 1-void DNAStorage::store_font(basic_string< char > const &code, TextFont *font)
            char *param1_str; int param1_len;
            PyObject *param2;
            static char * key_word_list[] = {(char *)"code", (char *)"font", NULL};
            if (PyArg_ParseTupleAndKeywords(args,kwds, "s#O:store_font", key_word_list, &param1_str, &param1_len, &param2))
            {
                TextFont *param2_this = (TextFont *)DTOOL_Call_GetPointerThisClass(param2, &Dtool_TextFont, 2, "DNAStorage.store_font", 0, coerced_ptr, report_errors);

                if (!((param2_this == NULL)))
                {
                    (local_this)->store_font(basic_string<char>(param1_str, param1_len), param2_this);
                    Py_XDECREF(coerced);
                    if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                      // TypeError raised; continue to next overload type.
                    } else {
#ifndef NDEBUG
                      Notify *notify = Notify::ptr();
                      if (notify->has_assert_failed()) {
                        PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                        notify->clear_assert_failed();
                        return (PyObject *)NULL;
                      }
#endif
                      if (PyErr_Occurred()) {
                        return (PyObject *)NULL;
                      }
                      return Py_BuildValue("");
                    }
                }
            }
        } else {
          PyErr_SetString(PyExc_TypeError,
                          "Cannot call DNAStorage.store_font() on a const object.");
          return (PyObject *) NULL;
        }

        if (coerced_ptr == NULL && !report_errors) {
          coerced_ptr = &coerced;
          continue;
        }
        if (!report_errors) {
          report_errors = true;
          continue;
        }
        break;
      }
      Py_XDECREF(coerced);
    }
    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "store_font(non-const DNAStorage this, string code, non-const TextFont font)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_store_font_96_comment =
    "C++ Interface:\n"
    "store_font(non-const DNAStorage this, string code, non-const TextFont font)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_store_font_96_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * TextFont *DNAStorage::find_font(basic_string< char > const &code)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_find_font_97(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-TextFont *DNAStorage::find_font(basic_string< char > const &code)
        char *param1_str; int param1_len;
        static char * key_word_list[] = {(char *)"code", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "s#:find_font", key_word_list, &param1_str, &param1_len));
        else
            (PyArg_Parse(args, "s#:find_font", &param1_str, &param1_len));
        if(!PyErr_Occurred())
        {
            TextFont *return_value = (local_this)->find_font(basic_string<char>(param1_str, param1_len));
            if (return_value != (TextFont *)0) {
              return_value->ref();
            }
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              if(return_value == NULL)
              {
                  Py_INCREF(Py_None);
                  return Py_None;
              }
              return DTool_CreatePyInstanceTyped((void *)return_value,Dtool_TextFont,true, false, (return_value)->as_typed_object()->get_type_index());
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.find_font() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "find_font(non-const DNAStorage this, string code)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_find_font_97_comment =
    "C++ Interface:\n"
    "find_font(non-const DNAStorage this, string code)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_find_font_97_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNAStorage::reset_fonts(void)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_reset_fonts_98(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNAStorage::reset_fonts(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":reset_fonts", key_word_list));
        else
            (PyArg_Parse(args, ":reset_fonts"));
        if(!PyErr_Occurred())
        {
            (local_this)->reset_fonts();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return Py_BuildValue("");
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.reset_fonts() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "reset_fonts(non-const DNAStorage this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_reset_fonts_98_comment =
    "C++ Interface:\n"
    "reset_fonts(non-const DNAStorage this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_reset_fonts_98_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNAStorage::store_node(basic_string< char > const &code, NodePath *node)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_store_node_99(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    {
      PyObject *coerced = NULL;
      PyObject **coerced_ptr = NULL;
      bool report_errors = false;
      while (true) {
        if (!((Dtool_PyInstDef *)self)->_is_const) {
          // 1-void DNAStorage::store_node(basic_string< char > const &code, NodePath *node)
            char *param1_str; int param1_len;
            PyObject *param2;
            static char * key_word_list[] = {(char *)"code", (char *)"node", NULL};
            if (PyArg_ParseTupleAndKeywords(args,kwds, "s#O:store_node", key_word_list, &param1_str, &param1_len, &param2))
            {
                NodePath *param2_this = (NodePath *)DTOOL_Call_GetPointerThisClass(param2, &Dtool_NodePath, 2, "DNAStorage.store_node", 0, coerced_ptr, report_errors);

                if (!((param2_this == NULL)))
                {
                    (local_this)->store_node(basic_string<char>(param1_str, param1_len), param2_this);
                    Py_XDECREF(coerced);
                    if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                      // TypeError raised; continue to next overload type.
                    } else {
#ifndef NDEBUG
                      Notify *notify = Notify::ptr();
                      if (notify->has_assert_failed()) {
                        PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                        notify->clear_assert_failed();
                        return (PyObject *)NULL;
                      }
#endif
                      if (PyErr_Occurred()) {
                        return (PyObject *)NULL;
                      }
                      return Py_BuildValue("");
                    }
                }
            }
        } else {
          PyErr_SetString(PyExc_TypeError,
                          "Cannot call DNAStorage.store_node() on a const object.");
          return (PyObject *) NULL;
        }

        if (coerced_ptr == NULL && !report_errors) {
          coerced_ptr = &coerced;
          continue;
        }
        if (!report_errors) {
          report_errors = true;
          continue;
        }
        break;
      }
      Py_XDECREF(coerced);
    }
    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "store_node(non-const DNAStorage this, string code, non-const NodePath node)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_store_node_99_comment =
    "C++ Interface:\n"
    "store_node(non-const DNAStorage this, string code, non-const NodePath node)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_store_node_99_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNAStorage::reset_nodes(void)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_reset_nodes_100(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNAStorage::reset_nodes(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":reset_nodes", key_word_list));
        else
            (PyArg_Parse(args, ":reset_nodes"));
        if(!PyErr_Occurred())
        {
            (local_this)->reset_nodes();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return Py_BuildValue("");
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.reset_nodes() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "reset_nodes(non-const DNAStorage this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_reset_nodes_100_comment =
    "C++ Interface:\n"
    "reset_nodes(non-const DNAStorage this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_reset_nodes_100_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNAStorage::store_hood_node(basic_string< char > const &code, NodePath *node)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_store_hood_node_101(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    {
      PyObject *coerced = NULL;
      PyObject **coerced_ptr = NULL;
      bool report_errors = false;
      while (true) {
        if (!((Dtool_PyInstDef *)self)->_is_const) {
          // 1-void DNAStorage::store_hood_node(basic_string< char > const &code, NodePath *node)
            char *param1_str; int param1_len;
            PyObject *param2;
            static char * key_word_list[] = {(char *)"code", (char *)"node", NULL};
            if (PyArg_ParseTupleAndKeywords(args,kwds, "s#O:store_hood_node", key_word_list, &param1_str, &param1_len, &param2))
            {
                NodePath *param2_this = (NodePath *)DTOOL_Call_GetPointerThisClass(param2, &Dtool_NodePath, 2, "DNAStorage.store_hood_node", 0, coerced_ptr, report_errors);

                if (!((param2_this == NULL)))
                {
                    (local_this)->store_hood_node(basic_string<char>(param1_str, param1_len), param2_this);
                    Py_XDECREF(coerced);
                    if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                      // TypeError raised; continue to next overload type.
                    } else {
#ifndef NDEBUG
                      Notify *notify = Notify::ptr();
                      if (notify->has_assert_failed()) {
                        PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                        notify->clear_assert_failed();
                        return (PyObject *)NULL;
                      }
#endif
                      if (PyErr_Occurred()) {
                        return (PyObject *)NULL;
                      }
                      return Py_BuildValue("");
                    }
                }
            }
        } else {
          PyErr_SetString(PyExc_TypeError,
                          "Cannot call DNAStorage.store_hood_node() on a const object.");
          return (PyObject *) NULL;
        }

        if (coerced_ptr == NULL && !report_errors) {
          coerced_ptr = &coerced;
          continue;
        }
        if (!report_errors) {
          report_errors = true;
          continue;
        }
        break;
      }
      Py_XDECREF(coerced);
    }
    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "store_hood_node(non-const DNAStorage this, string code, non-const NodePath node)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_store_hood_node_101_comment =
    "C++ Interface:\n"
    "store_hood_node(non-const DNAStorage this, string code, non-const NodePath node)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_store_hood_node_101_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNAStorage::reset_hood_nodes(void)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_reset_hood_nodes_102(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNAStorage::reset_hood_nodes(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":reset_hood_nodes", key_word_list));
        else
            (PyArg_Parse(args, ":reset_hood_nodes"));
        if(!PyErr_Occurred())
        {
            (local_this)->reset_hood_nodes();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return Py_BuildValue("");
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.reset_hood_nodes() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "reset_hood_nodes(non-const DNAStorage this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_reset_hood_nodes_102_comment =
    "C++ Interface:\n"
    "reset_hood_nodes(non-const DNAStorage this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_reset_hood_nodes_102_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNAStorage::store_place_node(basic_string< char > const &code, NodePath *node)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_store_place_node_103(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    {
      PyObject *coerced = NULL;
      PyObject **coerced_ptr = NULL;
      bool report_errors = false;
      while (true) {
        if (!((Dtool_PyInstDef *)self)->_is_const) {
          // 1-void DNAStorage::store_place_node(basic_string< char > const &code, NodePath *node)
            char *param1_str; int param1_len;
            PyObject *param2;
            static char * key_word_list[] = {(char *)"code", (char *)"node", NULL};
            if (PyArg_ParseTupleAndKeywords(args,kwds, "s#O:store_place_node", key_word_list, &param1_str, &param1_len, &param2))
            {
                NodePath *param2_this = (NodePath *)DTOOL_Call_GetPointerThisClass(param2, &Dtool_NodePath, 2, "DNAStorage.store_place_node", 0, coerced_ptr, report_errors);

                if (!((param2_this == NULL)))
                {
                    (local_this)->store_place_node(basic_string<char>(param1_str, param1_len), param2_this);
                    Py_XDECREF(coerced);
                    if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                      // TypeError raised; continue to next overload type.
                    } else {
#ifndef NDEBUG
                      Notify *notify = Notify::ptr();
                      if (notify->has_assert_failed()) {
                        PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                        notify->clear_assert_failed();
                        return (PyObject *)NULL;
                      }
#endif
                      if (PyErr_Occurred()) {
                        return (PyObject *)NULL;
                      }
                      return Py_BuildValue("");
                    }
                }
            }
        } else {
          PyErr_SetString(PyExc_TypeError,
                          "Cannot call DNAStorage.store_place_node() on a const object.");
          return (PyObject *) NULL;
        }

        if (coerced_ptr == NULL && !report_errors) {
          coerced_ptr = &coerced;
          continue;
        }
        if (!report_errors) {
          report_errors = true;
          continue;
        }
        break;
      }
      Py_XDECREF(coerced);
    }
    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "store_place_node(non-const DNAStorage this, string code, non-const NodePath node)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_store_place_node_103_comment =
    "C++ Interface:\n"
    "store_place_node(non-const DNAStorage this, string code, non-const NodePath node)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_store_place_node_103_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNAStorage::reset_place_nodes(void)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_reset_place_nodes_104(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNAStorage::reset_place_nodes(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":reset_place_nodes", key_word_list));
        else
            (PyArg_Parse(args, ":reset_place_nodes"));
        if(!PyErr_Occurred())
        {
            (local_this)->reset_place_nodes();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return Py_BuildValue("");
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.reset_place_nodes() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "reset_place_nodes(non-const DNAStorage this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_reset_place_nodes_104_comment =
    "C++ Interface:\n"
    "reset_place_nodes(non-const DNAStorage this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_reset_place_nodes_104_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * NodePath *DNAStorage::find_node(basic_string< char > const &code)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_find_node_105(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-NodePath *DNAStorage::find_node(basic_string< char > const &code)
        char *param1_str; int param1_len;
        static char * key_word_list[] = {(char *)"code", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "s#:find_node", key_word_list, &param1_str, &param1_len));
        else
            (PyArg_Parse(args, "s#:find_node", &param1_str, &param1_len));
        if(!PyErr_Occurred())
        {
            NodePath *return_value = (local_this)->find_node(basic_string<char>(param1_str, param1_len));
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              if(return_value == NULL)
              {
                  Py_INCREF(Py_None);
                  return Py_None;
              }
              return DTool_CreatePyInstance((void *)return_value,Dtool_NodePath,false, false);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.find_node() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "find_node(non-const DNAStorage this, string code)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_find_node_105_comment =
    "C++ Interface:\n"
    "find_node(non-const DNAStorage this, string code)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_find_node_105_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * DNASuitPoint DNAStorage::get_suit_point_at_index(unsigned short int index)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_get_suit_point_at_index_106(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-DNASuitPoint DNAStorage::get_suit_point_at_index(unsigned short int index)
        PyObject *param1;
        static char * key_word_list[] = {(char *)"index", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "O:get_suit_point_at_index", key_word_list, &param1));
        else
            (PyArg_Parse(args, "O:get_suit_point_at_index", &param1));
        if(!PyErr_Occurred())
        {
             PyObject *param1_uint = PyNumber_Long(param1);
            if (!((param1_uint == NULL)))
            {
                DNASuitPoint result = (local_this)->get_suit_point_at_index(PyLong_AsUnsignedLong(param1_uint));
                DNASuitPoint *return_value = new DNASuitPoint(result);
                 Py_XDECREF(param1_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  if(return_value == NULL)
                  {
                      Py_INCREF(Py_None);
                      return Py_None;
                  }
                  return DTool_CreatePyInstance((void *)return_value,Dtool_DNASuitPoint,true, false);
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.get_suit_point_at_index() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_suit_point_at_index(non-const DNAStorage this, unsigned int index)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_get_suit_point_at_index_106_comment =
    "C++ Interface:\n"
    "get_suit_point_at_index(non-const DNAStorage this, unsigned int index)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_get_suit_point_at_index_106_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNAStorage::reset_suit_points(void)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_reset_suit_points_107(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNAStorage::reset_suit_points(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":reset_suit_points", key_word_list));
        else
            (PyArg_Parse(args, ":reset_suit_points"));
        if(!PyErr_Occurred())
        {
            (local_this)->reset_suit_points();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return Py_BuildValue("");
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.reset_suit_points() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "reset_suit_points(non-const DNAStorage this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_reset_suit_points_107_comment =
    "C++ Interface:\n"
    "reset_suit_points(non-const DNAStorage this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_reset_suit_points_107_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * basic_string< char > DNAStorage::get_block_building_type(unsigned short int index)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_get_block_building_type_108(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-basic_string< char > DNAStorage::get_block_building_type(unsigned short int index)
        PyObject *param1;
        static char * key_word_list[] = {(char *)"index", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "O:get_block_building_type", key_word_list, &param1));
        else
            (PyArg_Parse(args, "O:get_block_building_type", &param1));
        if(!PyErr_Occurred())
        {
             PyObject *param1_uint = PyNumber_Long(param1);
            if (!((param1_uint == NULL)))
            {
                basic_string< char > return_value = (local_this)->get_block_building_type(PyLong_AsUnsignedLong(param1_uint));
                 Py_XDECREF(param1_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  return PyString_FromStringAndSize(return_value.data(), (int)return_value.length());
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.get_block_building_type() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_block_building_type(non-const DNAStorage this, unsigned int index)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_get_block_building_type_108_comment =
    "C++ Interface:\n"
    "get_block_building_type(non-const DNAStorage this, unsigned int index)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_get_block_building_type_108_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * basic_string< char > DNAStorage::get_title_from_block_number(unsigned short int index)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_get_title_from_block_number_109(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-basic_string< char > DNAStorage::get_title_from_block_number(unsigned short int index)
        PyObject *param1;
        static char * key_word_list[] = {(char *)"index", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "O:get_title_from_block_number", key_word_list, &param1));
        else
            (PyArg_Parse(args, "O:get_title_from_block_number", &param1));
        if(!PyErr_Occurred())
        {
             PyObject *param1_uint = PyNumber_Long(param1);
            if (!((param1_uint == NULL)))
            {
                basic_string< char > return_value = (local_this)->get_title_from_block_number(PyLong_AsUnsignedLong(param1_uint));
                 Py_XDECREF(param1_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  return PyString_FromStringAndSize(return_value.data(), (int)return_value.length());
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.get_title_from_block_number() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_title_from_block_number(non-const DNAStorage this, unsigned int index)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_get_title_from_block_number_109_comment =
    "C++ Interface:\n"
    "get_title_from_block_number(non-const DNAStorage this, unsigned int index)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_get_title_from_block_number_109_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * unsigned short int DNAStorage::get_zone_from_block_number(unsigned short int index)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_get_zone_from_block_number_110(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-unsigned short int DNAStorage::get_zone_from_block_number(unsigned short int index)
        PyObject *param1;
        static char * key_word_list[] = {(char *)"index", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "O:get_zone_from_block_number", key_word_list, &param1));
        else
            (PyArg_Parse(args, "O:get_zone_from_block_number", &param1));
        if(!PyErr_Occurred())
        {
             PyObject *param1_uint = PyNumber_Long(param1);
            if (!((param1_uint == NULL)))
            {
                unsigned short int return_value = (local_this)->get_zone_from_block_number(PyLong_AsUnsignedLong(param1_uint));
                 Py_XDECREF(param1_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  return PyLongOrInt_FromUnsignedLong(return_value);
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.get_zone_from_block_number() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_zone_from_block_number(non-const DNAStorage this, unsigned int index)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_get_zone_from_block_number_110_comment =
    "C++ Interface:\n"
    "get_zone_from_block_number(non-const DNAStorage this, unsigned int index)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_get_zone_from_block_number_110_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * unsigned char DNAStorage::get_num_block_numbers(void)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_get_num_block_numbers_111(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-unsigned char DNAStorage::get_num_block_numbers(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":get_num_block_numbers", key_word_list));
        else
            (PyArg_Parse(args, ":get_num_block_numbers"));
        if(!PyErr_Occurred())
        {
            unsigned char return_value = (local_this)->get_num_block_numbers();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return PyLongOrInt_FromUnsignedLong(return_value);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.get_num_block_numbers() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_num_block_numbers(non-const DNAStorage this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_get_num_block_numbers_111_comment =
    "C++ Interface:\n"
    "get_num_block_numbers(non-const DNAStorage this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_get_num_block_numbers_111_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * DNASuitEdge DNAStorage::get_suit_edge(unsigned short int start_index, unsigned short int end_index)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_get_suit_edge_112(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-DNASuitEdge DNAStorage::get_suit_edge(unsigned short int start_index, unsigned short int end_index)
        PyObject *param1;
        PyObject *param2;
        static char * key_word_list[] = {(char *)"start_index", (char *)"end_index", NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, "OO:get_suit_edge", key_word_list, &param1, &param2))
        {
             PyObject *param1_uint = PyNumber_Long(param1); PyObject *param2_uint = PyNumber_Long(param2);
            if (!((param1_uint == NULL)|| (param2_uint == NULL)))
            {
                DNASuitEdge result = (local_this)->get_suit_edge(PyLong_AsUnsignedLong(param1_uint), PyLong_AsUnsignedLong(param2_uint));
                DNASuitEdge *return_value = new DNASuitEdge(result);
                 Py_XDECREF(param1_uint); Py_XDECREF(param2_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  if(return_value == NULL)
                  {
                      Py_INCREF(Py_None);
                      return Py_None;
                  }
                  return DTool_CreatePyInstance((void *)return_value,Dtool_DNASuitEdge,true, false);
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.get_suit_edge() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_suit_edge(non-const DNAStorage this, unsigned int start_index, unsigned int end_index)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_get_suit_edge_112_comment =
    "C++ Interface:\n"
    "get_suit_edge(non-const DNAStorage this, unsigned int start_index, unsigned int end_index)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_get_suit_edge_112_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void DNAStorage::reset_battle_cells(void)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_reset_battle_cells_113(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-void DNAStorage::reset_battle_cells(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":reset_battle_cells", key_word_list));
        else
            (PyArg_Parse(args, ":reset_battle_cells"));
        if(!PyErr_Occurred())
        {
            (local_this)->reset_battle_cells();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return Py_BuildValue("");
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.reset_battle_cells() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "reset_battle_cells(non-const DNAStorage this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_reset_battle_cells_113_comment =
    "C++ Interface:\n"
    "reset_battle_cells(non-const DNAStorage this)\n"
    "\n"
    "//void remove_battle_cell(DNABattleCell cell); // To do\n"
    "";
#else
static const char * Dtool_DNAStorage_reset_battle_cells_113_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * DNABattleCell DNAStorage::get_battle_cell(unsigned short int index)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_get_battle_cell_114(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-DNABattleCell DNAStorage::get_battle_cell(unsigned short int index)
        PyObject *param1;
        static char * key_word_list[] = {(char *)"index", NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, "O:get_battle_cell", key_word_list, &param1));
        else
            (PyArg_Parse(args, "O:get_battle_cell", &param1));
        if(!PyErr_Occurred())
        {
             PyObject *param1_uint = PyNumber_Long(param1);
            if (!((param1_uint == NULL)))
            {
                DNABattleCell result = (local_this)->get_battle_cell(PyLong_AsUnsignedLong(param1_uint));
                DNABattleCell *return_value = new DNABattleCell(result);
                 Py_XDECREF(param1_uint);
                if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                  // TypeError raised; continue to next overload type.
                } else {
#ifndef NDEBUG
                  Notify *notify = Notify::ptr();
                  if (notify->has_assert_failed()) {
                    PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                    notify->clear_assert_failed();
                    return (PyObject *)NULL;
                  }
#endif
                  if (PyErr_Occurred()) {
                    return (PyObject *)NULL;
                  }
                  if(return_value == NULL)
                  {
                      Py_INCREF(Py_None);
                      return Py_None;
                  }
                  return DTool_CreatePyInstance((void *)return_value,Dtool_DNABattleCell,true, false);
                }
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.get_battle_cell() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_battle_cell(non-const DNAStorage this, unsigned int index)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_get_battle_cell_114_comment =
    "C++ Interface:\n"
    "get_battle_cell(non-const DNAStorage this, unsigned int index)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_get_battle_cell_114_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * unsigned short int DNAStorage::get_num_battle_cells(void)
 *******************************************************************/
static PyObject *Dtool_DNAStorage_get_num_battle_cells_115(PyObject *self, PyObject *args,PyObject *kwds) {
    DNAStorage * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNAStorage,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    if (!((Dtool_PyInstDef *)self)->_is_const) {
      // 1-unsigned short int DNAStorage::get_num_battle_cells(void)
        static char * key_word_list[] = {NULL};
        // Special Case to Make operator work 
        if(PyTuple_Check(args) || (kwds != NULL && PyDict_Check(kwds)))
            (PyArg_ParseTupleAndKeywords(args,kwds, ":get_num_battle_cells", key_word_list));
        else
            (PyArg_Parse(args, ":get_num_battle_cells"));
        if(!PyErr_Occurred())
        {
            unsigned short int return_value = (local_this)->get_num_battle_cells();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                return (PyObject *)NULL;
              }
#endif
              if (PyErr_Occurred()) {
                return (PyObject *)NULL;
              }
              return PyLongOrInt_FromUnsignedLong(return_value);
            }
        }
    } else {
      PyErr_SetString(PyExc_TypeError,
                      "Cannot call DNAStorage.get_num_battle_cells() on a const object.");
      return (PyObject *) NULL;
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "get_num_battle_cells(non-const DNAStorage this)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNAStorage_get_num_battle_cells_115_comment =
    "C++ Interface:\n"
    "get_num_battle_cells(non-const DNAStorage this)\n"
    "\n"
    "";
#else
static const char * Dtool_DNAStorage_get_num_battle_cells_115_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * DNAStorage::DNAStorage(void)
 *******************************************************************/
int  Dtool_Init_DNAStorage(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNAStorage::DNAStorage(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNAStorage", key_word_list))
        {
            DNAStorage *return_value = new DNAStorage();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNAStorage,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNAStorage()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNAStorage(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNAStorage)
    {
        printf("DNAStorage ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNAStorage * local_this = (DNAStorage *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNAStorage)
        return local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNAStorage(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNAStorage)
        return from_this;
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNALoader 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * basic_string< char > DNALoader::load_DNA_file(DNAStorage &store, Filename const &name)
 *******************************************************************/
static PyObject *Dtool_DNALoader_load_DNA_file_119(PyObject *self, PyObject *args,PyObject *kwds) {
    DNALoader * local_this = NULL;
    DTOOL_Call_ExtractThisPointerForType(self,&Dtool_DNALoader,(void **)&local_this);
    if(local_this == NULL) {
       PyErr_SetString(PyExc_AttributeError, "C++ object is not yet constructed, or already destructed.");
       return NULL;
    }
    {
      PyObject *coerced = NULL;
      PyObject **coerced_ptr = NULL;
      bool report_errors = false;
      while (true) {
        if (!((Dtool_PyInstDef *)self)->_is_const) {
          // 1-basic_string< char > DNALoader::load_DNA_file(DNAStorage &store, Filename const &name)
            PyObject *param1;
            PyObject *param2;
            static char * key_word_list[] = {(char *)"store", (char *)"name", NULL};
            if (PyArg_ParseTupleAndKeywords(args,kwds, "OO:load_DNA_file", key_word_list, &param1, &param2))
            {
                DNAStorage *param1_this = (DNAStorage *)DTOOL_Call_GetPointerThisClass(param1, &Dtool_DNAStorage, 1, "DNALoader.load_DNA_file", 0, coerced_ptr, report_errors);
Filename *param2_this = (Filename *)DTOOL_Call_GetPointerThisClass(param2, &Dtool_Filename, 2, "DNALoader.load_DNA_file", 1, coerced_ptr, report_errors);

                if (!((param1_this == NULL)|| (param2_this == NULL)))
                {
                    basic_string< char > return_value = (local_this)->load_DNA_file(*param1_this, *param2_this);
                    if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
                      // TypeError raised; continue to next overload type.
                    } else {
#ifndef NDEBUG
                      Notify *notify = Notify::ptr();
                      if (notify->has_assert_failed()) {
                        PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                        notify->clear_assert_failed();
                        return (PyObject *)NULL;
                      }
#endif
                      if (PyErr_Occurred()) {
                        return (PyObject *)NULL;
                      }
                      return PyString_FromStringAndSize(return_value.data(), (int)return_value.length());
                    }
                }
            }
        } else {
          PyErr_SetString(PyExc_TypeError,
                          "Cannot call DNALoader.load_DNA_file() on a const object.");
          return (PyObject *) NULL;
        }

        if (coerced_ptr == NULL && !report_errors) {
          coerced_ptr = &coerced;
          continue;
        }
        if (!report_errors) {
          report_errors = true;
          continue;
        }
        break;
      }
      Py_XDECREF(coerced);
    }
    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "load_DNA_file(non-const DNALoader this, non-const DNAStorage store, const Filename name)\n"
          "");
    return (PyObject *) NULL; 
}

#ifndef NDEBUG
static const char * Dtool_DNALoader_load_DNA_file_119_comment =
    "C++ Interface:\n"
    "load_DNA_file(non-const DNALoader this, non-const DNAStorage store, const Filename name)\n"
    "\n"
    "";
#else
static const char * Dtool_DNALoader_load_DNA_file_119_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * DNALoader::DNALoader(void)
 *******************************************************************/
int  Dtool_Init_DNALoader(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNALoader::DNALoader(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNALoader", key_word_list))
        {
            DNALoader *return_value = new DNALoader();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNALoader,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNALoader()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNALoader(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNALoader)
    {
        printf("DNALoader ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNALoader * local_this = (DNALoader *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNALoader)
        return local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNALoader(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNALoader)
        return from_this;
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNASign 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNASign::DNASign(void)
 *******************************************************************/
int  Dtool_Init_DNASign(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNASign::DNASign(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNASign", key_word_list))
        {
            DNASign *return_value = new DNASign();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNASign,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNASign()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNASign(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNASign)
    {
        printf("DNASign ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNASign * local_this = (DNASign *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNASign)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *)( DNANode *) local_this;
    if(requested_type == &Dtool_DNANode)
        return ( DNANode *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNASign(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNASign)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNASign*)other_this;
    }
    if(from_type == &Dtool_DNANode)
    {
          DNANode* other_this = (DNANode*)from_this;
          return (DNASign*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNASignBaseline 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNASignBaseline::DNASignBaseline(void)
 *******************************************************************/
int  Dtool_Init_DNASignBaseline(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNASignBaseline::DNASignBaseline(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNASignBaseline", key_word_list))
        {
            DNASignBaseline *return_value = new DNASignBaseline();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNASignBaseline,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNASignBaseline()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNASignBaseline(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNASignBaseline)
    {
        printf("DNASignBaseline ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNASignBaseline * local_this = (DNASignBaseline *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNASignBaseline)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *)( DNANode *) local_this;
    if(requested_type == &Dtool_DNANode)
        return ( DNANode *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNASignBaseline(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNASignBaseline)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNASignBaseline*)other_this;
    }
    if(from_type == &Dtool_DNANode)
    {
          DNANode* other_this = (DNANode*)from_this;
          return (DNASignBaseline*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNASignGraphic 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNASignGraphic::DNASignGraphic(void)
 *******************************************************************/
int  Dtool_Init_DNASignGraphic(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNASignGraphic::DNASignGraphic(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNASignGraphic", key_word_list))
        {
            DNASignGraphic *return_value = new DNASignGraphic();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNASignGraphic,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNASignGraphic()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNASignGraphic(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNASignGraphic)
    {
        printf("DNASignGraphic ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNASignGraphic * local_this = (DNASignGraphic *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNASignGraphic)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *)( DNANode *) local_this;
    if(requested_type == &Dtool_DNANode)
        return ( DNANode *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNASignGraphic(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNASignGraphic)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNASignGraphic*)other_this;
    }
    if(from_type == &Dtool_DNANode)
    {
          DNANode* other_this = (DNANode*)from_this;
          return (DNASignGraphic*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNASignText 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNASignText::DNASignText(void)
 *******************************************************************/
int  Dtool_Init_DNASignText(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNASignText::DNASignText(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNASignText", key_word_list))
        {
            DNASignText *return_value = new DNASignText();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNASignText,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNASignText()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNASignText(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNASignText)
    {
        printf("DNASignText ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNASignText * local_this = (DNASignText *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNASignText)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *)( DNANode *) local_this;
    if(requested_type == &Dtool_DNANode)
        return ( DNANode *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNASignText(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNASignText)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNASignText*)other_this;
    }
    if(from_type == &Dtool_DNANode)
    {
          DNANode* other_this = (DNANode*)from_this;
          return (DNASignText*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNAStreet 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNAStreet::DNAStreet(void)
 *******************************************************************/
int  Dtool_Init_DNAStreet(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNAStreet::DNAStreet(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNAStreet", key_word_list))
        {
            DNAStreet *return_value = new DNAStreet();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNAStreet,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNAStreet()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNAStreet(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNAStreet)
    {
        printf("DNAStreet ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNAStreet * local_this = (DNAStreet *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNAStreet)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *)( DNANode *) local_this;
    if(requested_type == &Dtool_DNANode)
        return ( DNANode *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNAStreet(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNAStreet)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNAStreet*)other_this;
    }
    if(from_type == &Dtool_DNANode)
    {
          DNANode* other_this = (DNANode*)from_this;
          return (DNAStreet*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNAVisGroup 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNAVisGroup::DNAVisGroup(void)
 *******************************************************************/
int  Dtool_Init_DNAVisGroup(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNAVisGroup::DNAVisGroup(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNAVisGroup", key_word_list))
        {
            DNAVisGroup *return_value = new DNAVisGroup();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNAVisGroup,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNAVisGroup()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNAVisGroup(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNAVisGroup)
    {
        printf("DNAVisGroup ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNAVisGroup * local_this = (DNAVisGroup *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNAVisGroup)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNAVisGroup(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNAVisGroup)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNAVisGroup*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNAWall 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNAWall::DNAWall(void)
 *******************************************************************/
int  Dtool_Init_DNAWall(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNAWall::DNAWall(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNAWall", key_word_list))
        {
            DNAWall *return_value = new DNAWall();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNAWall,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNAWall()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNAWall(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNAWall)
    {
        printf("DNAWall ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNAWall * local_this = (DNAWall *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNAWall)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *)( DNANode *) local_this;
    if(requested_type == &Dtool_DNANode)
        return ( DNANode *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNAWall(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNAWall)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNAWall*)other_this;
    }
    if(from_type == &Dtool_DNANode)
    {
          DNANode* other_this = (DNANode*)from_this;
          return (DNAWall*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Functions for .. DNAWindows 
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * DNAWindows::DNAWindows(void)
 *******************************************************************/
int  Dtool_Init_DNAWindows(PyObject *self, PyObject *args, PyObject *kwds)  {
    {
      // 1-DNAWindows::DNAWindows(void)
        static char * key_word_list[] = {NULL};
        if (PyArg_ParseTupleAndKeywords(args,kwds, ":DNAWindows", key_word_list))
        {
            DNAWindows *return_value = new DNAWindows();
            if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
              // TypeError raised; continue to next overload type.
              delete return_value;
            } else {
#ifndef NDEBUG
              Notify *notify = Notify::ptr();
              if (notify->has_assert_failed()) {
                PyErr_SetString(PyExc_AssertionError, notify->get_assert_error_message().c_str());
                notify->clear_assert_failed();
                delete return_value;
                return -1;
              }
#endif
              if (PyErr_Occurred()) {
                delete return_value;
                return -1;
              }
              return DTool_PyInit_Finalize(self, return_value,&Dtool_DNAWindows,true,false);
            }
        }
    }

    if(!PyErr_Occurred())
        PyErr_SetString(PyExc_TypeError,
          "Must Match :\n"
          "DNAWindows()\n"
          "");
    return -1;
}


inline void  * Dtool_UpcastInterface_DNAWindows(PyObject *self, Dtool_PyTypedObject *requested_type)
{
    Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
    if(SelfType != &Dtool_DNAWindows)
    {
        printf("DNAWindows ** Bad Source Type-- Requesting Conversion from %s to %s\n",((Dtool_PyInstDef *)self)->_My_Type->_name,requested_type->_name);fflush(NULL);
        return NULL;
    }
 
    DNAWindows * local_this = (DNAWindows *)((Dtool_PyInstDef *)self)->_ptr_to_object;
    if(requested_type == &Dtool_DNAWindows)
        return local_this;
    if(requested_type == &Dtool_DNAGroup)
        return ( DNAGroup *) local_this;
    return NULL;
}
inline void  * Dtool_DowncastInterface_DNAWindows(void *from_this, Dtool_PyTypedObject *from_type)
{
    if(from_this == NULL || from_type == NULL)
        return NULL;
    if(from_type == &Dtool_DNAWindows)
        return from_this;
    if(from_type == &Dtool_DNAGroup)
    {
          DNAGroup* other_this = (DNAGroup*)from_this;
          return (DNAWindows*)other_this;
    }
    return (void *) NULL;
}
//********************************************************************
//*** Py Init Code For .. DNAGroup | DNAGroup
//********************************************************************
PyMethodDef Dtool_Methods_DNAGroup[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNAGroup(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DTOOL_SUPPER_BASE._Dtool_ClassInit(NULL);
        Dtool_DNAGroup.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DTOOL_SUPPER_BASE.As_PyTypeObject());
        Dtool_DNAGroup.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNAGroup.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNAGroup.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNAGroup.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNAGroup)");
             printf(" Error In PyType_ReadyDNAGroup");
             return;
        }
        Py_INCREF(&Dtool_DNAGroup.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNAGroup,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNAGroup.As_PyTypeObject());
        PyModule_AddObject(module, "DNAGroup",(PyObject *)&Dtool_DNAGroup.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNANode | DNANode
//********************************************************************
PyMethodDef Dtool_Methods_DNANode[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNANode(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNAGroup._Dtool_ClassInit(NULL);
        Dtool_DNANode.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNAGroup.As_PyTypeObject());
        Dtool_DNANode.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNANode.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNANode.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNANode.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNANode)");
             printf(" Error In PyType_ReadyDNANode");
             return;
        }
        Py_INCREF(&Dtool_DNANode.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNANode,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNANode.As_PyTypeObject());
        PyModule_AddObject(module, "DNANode",(PyObject *)&Dtool_DNANode.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNALandmarkBuilding | DNALandmarkBuilding
//********************************************************************
PyMethodDef Dtool_Methods_DNALandmarkBuilding[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNALandmarkBuilding(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNANode._Dtool_ClassInit(NULL);
        Dtool_DNALandmarkBuilding.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNANode.As_PyTypeObject());
        Dtool_DNALandmarkBuilding.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNALandmarkBuilding.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNALandmarkBuilding.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNALandmarkBuilding.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNALandmarkBuilding)");
             printf(" Error In PyType_ReadyDNALandmarkBuilding");
             return;
        }
        Py_INCREF(&Dtool_DNALandmarkBuilding.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNALandmarkBuilding,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNALandmarkBuilding.As_PyTypeObject());
        PyModule_AddObject(module, "DNALandmarkBuilding",(PyObject *)&Dtool_DNALandmarkBuilding.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNAAnimBuilding | DNAAnimBuilding
//********************************************************************
PyMethodDef Dtool_Methods_DNAAnimBuilding[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNAAnimBuilding(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNALandmarkBuilding._Dtool_ClassInit(NULL);
        Dtool_DNAAnimBuilding.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNALandmarkBuilding.As_PyTypeObject());
        Dtool_DNAAnimBuilding.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNAAnimBuilding.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNAAnimBuilding.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNAAnimBuilding.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNAAnimBuilding)");
             printf(" Error In PyType_ReadyDNAAnimBuilding");
             return;
        }
        Py_INCREF(&Dtool_DNAAnimBuilding.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNAAnimBuilding,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNAAnimBuilding.As_PyTypeObject());
        PyModule_AddObject(module, "DNAAnimBuilding",(PyObject *)&Dtool_DNAAnimBuilding.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNAProp | DNAProp
//********************************************************************
PyMethodDef Dtool_Methods_DNAProp[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNAProp(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNANode._Dtool_ClassInit(NULL);
        Dtool_DNAProp.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNANode.As_PyTypeObject());
        Dtool_DNAProp.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNAProp.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNAProp.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNAProp.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNAProp)");
             printf(" Error In PyType_ReadyDNAProp");
             return;
        }
        Py_INCREF(&Dtool_DNAProp.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNAProp,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNAProp.As_PyTypeObject());
        PyModule_AddObject(module, "DNAProp",(PyObject *)&Dtool_DNAProp.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNAAnimProp | DNAAnimProp
//********************************************************************
PyMethodDef Dtool_Methods_DNAAnimProp[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNAAnimProp(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNAProp._Dtool_ClassInit(NULL);
        Dtool_DNAAnimProp.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNAProp.As_PyTypeObject());
        Dtool_DNAAnimProp.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNAAnimProp.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNAAnimProp.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNAAnimProp.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNAAnimProp)");
             printf(" Error In PyType_ReadyDNAAnimProp");
             return;
        }
        Py_INCREF(&Dtool_DNAAnimProp.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNAAnimProp,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNAAnimProp.As_PyTypeObject());
        PyModule_AddObject(module, "DNAAnimProp",(PyObject *)&Dtool_DNAAnimProp.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNABattleCell | DNABattleCell
//********************************************************************
PyMethodDef Dtool_Methods_DNABattleCell[]= {
  { "set_width",(PyCFunction ) &Dtool_DNABattleCell_set_width_22, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_set_width_22_comment},
  { "setWidth",(PyCFunction ) &Dtool_DNABattleCell_set_width_22, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_set_width_22_comment},
  { "set_height",(PyCFunction ) &Dtool_DNABattleCell_set_height_23, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_set_height_23_comment},
  { "setHeight",(PyCFunction ) &Dtool_DNABattleCell_set_height_23, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_set_height_23_comment},
  { "set_width_height",(PyCFunction ) &Dtool_DNABattleCell_set_width_height_24, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_set_width_height_24_comment},
  { "setWidthHeight",(PyCFunction ) &Dtool_DNABattleCell_set_width_height_24, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_set_width_height_24_comment},
  { "set_pos",(PyCFunction ) &Dtool_DNABattleCell_set_pos_25, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_set_pos_25_comment},
  { "setPos",(PyCFunction ) &Dtool_DNABattleCell_set_pos_25, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_set_pos_25_comment},
  { "get_width",(PyCFunction ) &Dtool_DNABattleCell_get_width_26, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_get_width_26_comment},
  { "getWidth",(PyCFunction ) &Dtool_DNABattleCell_get_width_26, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_get_width_26_comment},
  { "get_height",(PyCFunction ) &Dtool_DNABattleCell_get_height_27, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_get_height_27_comment},
  { "getHeight",(PyCFunction ) &Dtool_DNABattleCell_get_height_27, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_get_height_27_comment},
  { "get_pos",(PyCFunction ) &Dtool_DNABattleCell_get_pos_28, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_get_pos_28_comment},
  { "getPos",(PyCFunction ) &Dtool_DNABattleCell_get_pos_28, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNABattleCell_get_pos_28_comment},
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNABattleCell(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DTOOL_SUPPER_BASE._Dtool_ClassInit(NULL);
        Dtool_DNABattleCell.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DTOOL_SUPPER_BASE.As_PyTypeObject());
        Dtool_DNABattleCell.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNABattleCell.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNABattleCell.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNABattleCell.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNABattleCell)");
             printf(" Error In PyType_ReadyDNABattleCell");
             return;
        }
        Py_INCREF(&Dtool_DNABattleCell.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNABattleCell,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNABattleCell.As_PyTypeObject());
        PyModule_AddObject(module, "DNABattleCell",(PyObject *)&Dtool_DNABattleCell.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNACornice | DNACornice
//********************************************************************
PyMethodDef Dtool_Methods_DNACornice[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNACornice(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNAGroup._Dtool_ClassInit(NULL);
        Dtool_DNACornice.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNAGroup.As_PyTypeObject());
        Dtool_DNACornice.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNACornice.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNACornice.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNACornice.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNACornice)");
             printf(" Error In PyType_ReadyDNACornice");
             return;
        }
        Py_INCREF(&Dtool_DNACornice.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNACornice,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNACornice.As_PyTypeObject());
        PyModule_AddObject(module, "DNACornice",(PyObject *)&Dtool_DNACornice.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNADoor | DNADoor
//********************************************************************
PyMethodDef Dtool_Methods_DNADoor[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNADoor(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNAGroup._Dtool_ClassInit(NULL);
        Dtool_DNADoor.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNAGroup.As_PyTypeObject());
        Dtool_DNADoor.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNADoor.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNADoor.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNADoor.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNADoor)");
             printf(" Error In PyType_ReadyDNADoor");
             return;
        }
        Py_INCREF(&Dtool_DNADoor.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNADoor,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNADoor.As_PyTypeObject());
        PyModule_AddObject(module, "DNADoor",(PyObject *)&Dtool_DNADoor.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNAFlatBuilding | DNAFlatBuilding
//********************************************************************
PyMethodDef Dtool_Methods_DNAFlatBuilding[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNAFlatBuilding(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNANode._Dtool_ClassInit(NULL);
        Dtool_DNAFlatBuilding.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNANode.As_PyTypeObject());
        Dtool_DNAFlatBuilding.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNAFlatBuilding.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNAFlatBuilding.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNAFlatBuilding.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNAFlatBuilding)");
             printf(" Error In PyType_ReadyDNAFlatBuilding");
             return;
        }
        Py_INCREF(&Dtool_DNAFlatBuilding.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNAFlatBuilding,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNAFlatBuilding.As_PyTypeObject());
        PyModule_AddObject(module, "DNAFlatBuilding",(PyObject *)&Dtool_DNAFlatBuilding.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNAFlatDoor | DNAFlatDoor
//********************************************************************
PyMethodDef Dtool_Methods_DNAFlatDoor[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNAFlatDoor(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNADoor._Dtool_ClassInit(NULL);
        Dtool_DNAFlatDoor.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNADoor.As_PyTypeObject());
        Dtool_DNAFlatDoor.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNAFlatDoor.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNAFlatDoor.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNAFlatDoor.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNAFlatDoor)");
             printf(" Error In PyType_ReadyDNAFlatDoor");
             return;
        }
        Py_INCREF(&Dtool_DNAFlatDoor.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNAFlatDoor,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNAFlatDoor.As_PyTypeObject());
        PyModule_AddObject(module, "DNAFlatDoor",(PyObject *)&Dtool_DNAFlatDoor.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNAInteractiveProp | DNAInteractiveProp
//********************************************************************
PyMethodDef Dtool_Methods_DNAInteractiveProp[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNAInteractiveProp(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNAAnimProp._Dtool_ClassInit(NULL);
        Dtool_DNAInteractiveProp.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNAAnimProp.As_PyTypeObject());
        Dtool_DNAInteractiveProp.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNAInteractiveProp.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNAInteractiveProp.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNAInteractiveProp.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNAInteractiveProp)");
             printf(" Error In PyType_ReadyDNAInteractiveProp");
             return;
        }
        Py_INCREF(&Dtool_DNAInteractiveProp.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNAInteractiveProp,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNAInteractiveProp.As_PyTypeObject());
        PyModule_AddObject(module, "DNAInteractiveProp",(PyObject *)&Dtool_DNAInteractiveProp.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNASuitPoint | DNASuitPoint
//********************************************************************
PyMethodDef Dtool_Methods_DNASuitPoint[]= {
  { "set_index",(PyCFunction ) &Dtool_DNASuitPoint_set_index_68, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_set_index_68_comment},
  { "setIndex",(PyCFunction ) &Dtool_DNASuitPoint_set_index_68, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_set_index_68_comment},
  { "set_graph_id",(PyCFunction ) &Dtool_DNASuitPoint_set_graph_id_69, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_set_graph_id_69_comment},
  { "setGraphId",(PyCFunction ) &Dtool_DNASuitPoint_set_graph_id_69, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_set_graph_id_69_comment},
  { "set_landmark_building_index",(PyCFunction ) &Dtool_DNASuitPoint_set_landmark_building_index_70, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_set_landmark_building_index_70_comment},
  { "setLandmarkBuildingIndex",(PyCFunction ) &Dtool_DNASuitPoint_set_landmark_building_index_70, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_set_landmark_building_index_70_comment},
  { "set_pos",(PyCFunction ) &Dtool_DNASuitPoint_set_pos_71, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_set_pos_71_comment},
  { "setPos",(PyCFunction ) &Dtool_DNASuitPoint_set_pos_71, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_set_pos_71_comment},
  { "set_point_type",(PyCFunction ) &Dtool_DNASuitPoint_set_point_type_72, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_set_point_type_72_comment},
  { "setPointType",(PyCFunction ) &Dtool_DNASuitPoint_set_point_type_72, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_set_point_type_72_comment},
  { "get_index",(PyCFunction ) &Dtool_DNASuitPoint_get_index_73, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_get_index_73_comment},
  { "getIndex",(PyCFunction ) &Dtool_DNASuitPoint_get_index_73, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_get_index_73_comment},
  { "get_graph_id",(PyCFunction ) &Dtool_DNASuitPoint_get_graph_id_74, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_get_graph_id_74_comment},
  { "getGraphId",(PyCFunction ) &Dtool_DNASuitPoint_get_graph_id_74, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_get_graph_id_74_comment},
  { "get_landmark_building_index",(PyCFunction ) &Dtool_DNASuitPoint_get_landmark_building_index_75, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_get_landmark_building_index_75_comment},
  { "getLandmarkBuildingIndex",(PyCFunction ) &Dtool_DNASuitPoint_get_landmark_building_index_75, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_get_landmark_building_index_75_comment},
  { "get_pos",(PyCFunction ) &Dtool_DNASuitPoint_get_pos_76, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_get_pos_76_comment},
  { "getPos",(PyCFunction ) &Dtool_DNASuitPoint_get_pos_76, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_get_pos_76_comment},
  { "get_point_type",(PyCFunction ) &Dtool_DNASuitPoint_get_point_type_77, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_get_point_type_77_comment},
  { "getPointType",(PyCFunction ) &Dtool_DNASuitPoint_get_point_type_77, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitPoint_get_point_type_77_comment},
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNASuitPoint(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DTOOL_SUPPER_BASE._Dtool_ClassInit(NULL);
        Dtool_DNASuitPoint.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DTOOL_SUPPER_BASE.As_PyTypeObject());
        Dtool_DNASuitPoint.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNASuitPoint.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNASuitPoint.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNASuitPoint.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNASuitPoint)");
             printf(" Error In PyType_ReadyDNASuitPoint");
             return;
        }
        Py_INCREF(&Dtool_DNASuitPoint.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNASuitPoint,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNASuitPoint.As_PyTypeObject());
        PyModule_AddObject(module, "DNASuitPoint",(PyObject *)&Dtool_DNASuitPoint.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNASuitEdge | DNASuitEdge
//********************************************************************
PyMethodDef Dtool_Methods_DNASuitEdge[]= {
  { "set_start_point",(PyCFunction ) &Dtool_DNASuitEdge_set_start_point_81, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitEdge_set_start_point_81_comment},
  { "setStartPoint",(PyCFunction ) &Dtool_DNASuitEdge_set_start_point_81, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitEdge_set_start_point_81_comment},
  { "set_end_point",(PyCFunction ) &Dtool_DNASuitEdge_set_end_point_82, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitEdge_set_end_point_82_comment},
  { "setEndPoint",(PyCFunction ) &Dtool_DNASuitEdge_set_end_point_82, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitEdge_set_end_point_82_comment},
  { "set_zone_id",(PyCFunction ) &Dtool_DNASuitEdge_set_zone_id_83, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitEdge_set_zone_id_83_comment},
  { "setZoneId",(PyCFunction ) &Dtool_DNASuitEdge_set_zone_id_83, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitEdge_set_zone_id_83_comment},
  { "get_start_point",(PyCFunction ) &Dtool_DNASuitEdge_get_start_point_84, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitEdge_get_start_point_84_comment},
  { "getStartPoint",(PyCFunction ) &Dtool_DNASuitEdge_get_start_point_84, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitEdge_get_start_point_84_comment},
  { "get_end_point",(PyCFunction ) &Dtool_DNASuitEdge_get_end_point_85, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitEdge_get_end_point_85_comment},
  { "getEndPoint",(PyCFunction ) &Dtool_DNASuitEdge_get_end_point_85, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitEdge_get_end_point_85_comment},
  { "get_zone_id",(PyCFunction ) &Dtool_DNASuitEdge_get_zone_id_86, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitEdge_get_zone_id_86_comment},
  { "getZoneId",(PyCFunction ) &Dtool_DNASuitEdge_get_zone_id_86, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNASuitEdge_get_zone_id_86_comment},
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNASuitEdge(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DTOOL_SUPPER_BASE._Dtool_ClassInit(NULL);
        Dtool_DNASuitEdge.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DTOOL_SUPPER_BASE.As_PyTypeObject());
        Dtool_DNASuitEdge.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNASuitEdge.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNASuitEdge.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNASuitEdge.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNASuitEdge)");
             printf(" Error In PyType_ReadyDNASuitEdge");
             return;
        }
        Py_INCREF(&Dtool_DNASuitEdge.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNASuitEdge,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNASuitEdge.As_PyTypeObject());
        PyModule_AddObject(module, "DNASuitEdge",(PyObject *)&Dtool_DNASuitEdge.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNAStorage | DNAStorage
//********************************************************************
PyMethodDef Dtool_Methods_DNAStorage[]= {
  { "store_catalog_code",(PyCFunction ) &Dtool_DNAStorage_store_catalog_code_90, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_store_catalog_code_90_comment},
  { "storeCatalogCode",(PyCFunction ) &Dtool_DNAStorage_store_catalog_code_90, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_store_catalog_code_90_comment},
  { "get_catalog_code",(PyCFunction ) &Dtool_DNAStorage_get_catalog_code_91, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_catalog_code_91_comment},
  { "getCatalogCode",(PyCFunction ) &Dtool_DNAStorage_get_catalog_code_91, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_catalog_code_91_comment},
  { "get_num_catalog_codes",(PyCFunction ) &Dtool_DNAStorage_get_num_catalog_codes_92, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_num_catalog_codes_92_comment},
  { "getNumCatalogCodes",(PyCFunction ) &Dtool_DNAStorage_get_num_catalog_codes_92, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_num_catalog_codes_92_comment},
  { "store_texture",(PyCFunction ) &Dtool_DNAStorage_store_texture_93, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_store_texture_93_comment},
  { "storeTexture",(PyCFunction ) &Dtool_DNAStorage_store_texture_93, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_store_texture_93_comment},
  { "find_texture",(PyCFunction ) &Dtool_DNAStorage_find_texture_94, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_find_texture_94_comment},
  { "findTexture",(PyCFunction ) &Dtool_DNAStorage_find_texture_94, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_find_texture_94_comment},
  { "reset_textures",(PyCFunction ) &Dtool_DNAStorage_reset_textures_95, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_textures_95_comment},
  { "resetTextures",(PyCFunction ) &Dtool_DNAStorage_reset_textures_95, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_textures_95_comment},
  { "store_font",(PyCFunction ) &Dtool_DNAStorage_store_font_96, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_store_font_96_comment},
  { "storeFont",(PyCFunction ) &Dtool_DNAStorage_store_font_96, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_store_font_96_comment},
  { "find_font",(PyCFunction ) &Dtool_DNAStorage_find_font_97, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_find_font_97_comment},
  { "findFont",(PyCFunction ) &Dtool_DNAStorage_find_font_97, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_find_font_97_comment},
  { "reset_fonts",(PyCFunction ) &Dtool_DNAStorage_reset_fonts_98, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_fonts_98_comment},
  { "resetFonts",(PyCFunction ) &Dtool_DNAStorage_reset_fonts_98, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_fonts_98_comment},
  { "store_node",(PyCFunction ) &Dtool_DNAStorage_store_node_99, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_store_node_99_comment},
  { "storeNode",(PyCFunction ) &Dtool_DNAStorage_store_node_99, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_store_node_99_comment},
  { "reset_nodes",(PyCFunction ) &Dtool_DNAStorage_reset_nodes_100, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_nodes_100_comment},
  { "resetNodes",(PyCFunction ) &Dtool_DNAStorage_reset_nodes_100, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_nodes_100_comment},
  { "store_hood_node",(PyCFunction ) &Dtool_DNAStorage_store_hood_node_101, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_store_hood_node_101_comment},
  { "storeHoodNode",(PyCFunction ) &Dtool_DNAStorage_store_hood_node_101, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_store_hood_node_101_comment},
  { "reset_hood_nodes",(PyCFunction ) &Dtool_DNAStorage_reset_hood_nodes_102, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_hood_nodes_102_comment},
  { "resetHoodNodes",(PyCFunction ) &Dtool_DNAStorage_reset_hood_nodes_102, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_hood_nodes_102_comment},
  { "store_place_node",(PyCFunction ) &Dtool_DNAStorage_store_place_node_103, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_store_place_node_103_comment},
  { "storePlaceNode",(PyCFunction ) &Dtool_DNAStorage_store_place_node_103, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_store_place_node_103_comment},
  { "reset_place_nodes",(PyCFunction ) &Dtool_DNAStorage_reset_place_nodes_104, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_place_nodes_104_comment},
  { "resetPlaceNodes",(PyCFunction ) &Dtool_DNAStorage_reset_place_nodes_104, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_place_nodes_104_comment},
  { "find_node",(PyCFunction ) &Dtool_DNAStorage_find_node_105, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_find_node_105_comment},
  { "findNode",(PyCFunction ) &Dtool_DNAStorage_find_node_105, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_find_node_105_comment},
  { "get_suit_point_at_index",(PyCFunction ) &Dtool_DNAStorage_get_suit_point_at_index_106, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_suit_point_at_index_106_comment},
  { "getSuitPointAtIndex",(PyCFunction ) &Dtool_DNAStorage_get_suit_point_at_index_106, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_suit_point_at_index_106_comment},
  { "reset_suit_points",(PyCFunction ) &Dtool_DNAStorage_reset_suit_points_107, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_suit_points_107_comment},
  { "resetSuitPoints",(PyCFunction ) &Dtool_DNAStorage_reset_suit_points_107, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_suit_points_107_comment},
  { "get_block_building_type",(PyCFunction ) &Dtool_DNAStorage_get_block_building_type_108, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_block_building_type_108_comment},
  { "getBlockBuildingType",(PyCFunction ) &Dtool_DNAStorage_get_block_building_type_108, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_block_building_type_108_comment},
  { "get_title_from_block_number",(PyCFunction ) &Dtool_DNAStorage_get_title_from_block_number_109, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_title_from_block_number_109_comment},
  { "getTitleFromBlockNumber",(PyCFunction ) &Dtool_DNAStorage_get_title_from_block_number_109, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_title_from_block_number_109_comment},
  { "get_zone_from_block_number",(PyCFunction ) &Dtool_DNAStorage_get_zone_from_block_number_110, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_zone_from_block_number_110_comment},
  { "getZoneFromBlockNumber",(PyCFunction ) &Dtool_DNAStorage_get_zone_from_block_number_110, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_zone_from_block_number_110_comment},
  { "get_num_block_numbers",(PyCFunction ) &Dtool_DNAStorage_get_num_block_numbers_111, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_num_block_numbers_111_comment},
  { "getNumBlockNumbers",(PyCFunction ) &Dtool_DNAStorage_get_num_block_numbers_111, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_num_block_numbers_111_comment},
  { "get_suit_edge",(PyCFunction ) &Dtool_DNAStorage_get_suit_edge_112, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_suit_edge_112_comment},
  { "getSuitEdge",(PyCFunction ) &Dtool_DNAStorage_get_suit_edge_112, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_suit_edge_112_comment},
  { "reset_battle_cells",(PyCFunction ) &Dtool_DNAStorage_reset_battle_cells_113, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_battle_cells_113_comment},
  { "resetBattleCells",(PyCFunction ) &Dtool_DNAStorage_reset_battle_cells_113, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_reset_battle_cells_113_comment},
  { "get_battle_cell",(PyCFunction ) &Dtool_DNAStorage_get_battle_cell_114, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_battle_cell_114_comment},
  { "getBattleCell",(PyCFunction ) &Dtool_DNAStorage_get_battle_cell_114, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_battle_cell_114_comment},
  { "get_num_battle_cells",(PyCFunction ) &Dtool_DNAStorage_get_num_battle_cells_115, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_num_battle_cells_115_comment},
  { "getNumBattleCells",(PyCFunction ) &Dtool_DNAStorage_get_num_battle_cells_115, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNAStorage_get_num_battle_cells_115_comment},
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNAStorage(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DTOOL_SUPPER_BASE._Dtool_ClassInit(NULL);
        Dtool_DNAStorage.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DTOOL_SUPPER_BASE.As_PyTypeObject());
        Dtool_DNAStorage.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNAStorage.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNAStorage.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNAStorage.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNAStorage)");
             printf(" Error In PyType_ReadyDNAStorage");
             return;
        }
        Py_INCREF(&Dtool_DNAStorage.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNAStorage,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNAStorage.As_PyTypeObject());
        PyModule_AddObject(module, "DNAStorage",(PyObject *)&Dtool_DNAStorage.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNALoader | DNALoader
//********************************************************************
PyMethodDef Dtool_Methods_DNALoader[]= {
  { "load_DNA_file",(PyCFunction ) &Dtool_DNALoader_load_DNA_file_119, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNALoader_load_DNA_file_119_comment},
  { "loadDNAFile",(PyCFunction ) &Dtool_DNALoader_load_DNA_file_119, METH_VARARGS| METH_KEYWORDS, (char *)Dtool_DNALoader_load_DNA_file_119_comment},
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNALoader(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DTOOL_SUPPER_BASE._Dtool_ClassInit(NULL);
        Dtool_DNALoader.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DTOOL_SUPPER_BASE.As_PyTypeObject());
        Dtool_DNALoader.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNALoader.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNALoader.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNALoader.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNALoader)");
             printf(" Error In PyType_ReadyDNALoader");
             return;
        }
        Py_INCREF(&Dtool_DNALoader.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNALoader,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNALoader.As_PyTypeObject());
        PyModule_AddObject(module, "DNALoader",(PyObject *)&Dtool_DNALoader.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNASign | DNASign
//********************************************************************
PyMethodDef Dtool_Methods_DNASign[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNASign(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNANode._Dtool_ClassInit(NULL);
        Dtool_DNASign.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNANode.As_PyTypeObject());
        Dtool_DNASign.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNASign.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNASign.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNASign.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNASign)");
             printf(" Error In PyType_ReadyDNASign");
             return;
        }
        Py_INCREF(&Dtool_DNASign.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNASign,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNASign.As_PyTypeObject());
        PyModule_AddObject(module, "DNASign",(PyObject *)&Dtool_DNASign.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNASignBaseline | DNASignBaseline
//********************************************************************
PyMethodDef Dtool_Methods_DNASignBaseline[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNASignBaseline(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNANode._Dtool_ClassInit(NULL);
        Dtool_DNASignBaseline.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNANode.As_PyTypeObject());
        Dtool_DNASignBaseline.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNASignBaseline.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNASignBaseline.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNASignBaseline.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNASignBaseline)");
             printf(" Error In PyType_ReadyDNASignBaseline");
             return;
        }
        Py_INCREF(&Dtool_DNASignBaseline.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNASignBaseline,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNASignBaseline.As_PyTypeObject());
        PyModule_AddObject(module, "DNASignBaseline",(PyObject *)&Dtool_DNASignBaseline.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNASignGraphic | DNASignGraphic
//********************************************************************
PyMethodDef Dtool_Methods_DNASignGraphic[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNASignGraphic(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNANode._Dtool_ClassInit(NULL);
        Dtool_DNASignGraphic.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNANode.As_PyTypeObject());
        Dtool_DNASignGraphic.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNASignGraphic.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNASignGraphic.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNASignGraphic.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNASignGraphic)");
             printf(" Error In PyType_ReadyDNASignGraphic");
             return;
        }
        Py_INCREF(&Dtool_DNASignGraphic.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNASignGraphic,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNASignGraphic.As_PyTypeObject());
        PyModule_AddObject(module, "DNASignGraphic",(PyObject *)&Dtool_DNASignGraphic.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNASignText | DNASignText
//********************************************************************
PyMethodDef Dtool_Methods_DNASignText[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNASignText(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNANode._Dtool_ClassInit(NULL);
        Dtool_DNASignText.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNANode.As_PyTypeObject());
        Dtool_DNASignText.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNASignText.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNASignText.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNASignText.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNASignText)");
             printf(" Error In PyType_ReadyDNASignText");
             return;
        }
        Py_INCREF(&Dtool_DNASignText.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNASignText,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNASignText.As_PyTypeObject());
        PyModule_AddObject(module, "DNASignText",(PyObject *)&Dtool_DNASignText.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNAStreet | DNAStreet
//********************************************************************
PyMethodDef Dtool_Methods_DNAStreet[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNAStreet(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNANode._Dtool_ClassInit(NULL);
        Dtool_DNAStreet.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNANode.As_PyTypeObject());
        Dtool_DNAStreet.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNAStreet.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNAStreet.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNAStreet.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNAStreet)");
             printf(" Error In PyType_ReadyDNAStreet");
             return;
        }
        Py_INCREF(&Dtool_DNAStreet.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNAStreet,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNAStreet.As_PyTypeObject());
        PyModule_AddObject(module, "DNAStreet",(PyObject *)&Dtool_DNAStreet.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNAVisGroup | DNAVisGroup
//********************************************************************
PyMethodDef Dtool_Methods_DNAVisGroup[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNAVisGroup(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNAGroup._Dtool_ClassInit(NULL);
        Dtool_DNAVisGroup.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNAGroup.As_PyTypeObject());
        Dtool_DNAVisGroup.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNAVisGroup.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNAVisGroup.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNAVisGroup.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNAVisGroup)");
             printf(" Error In PyType_ReadyDNAVisGroup");
             return;
        }
        Py_INCREF(&Dtool_DNAVisGroup.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNAVisGroup,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNAVisGroup.As_PyTypeObject());
        PyModule_AddObject(module, "DNAVisGroup",(PyObject *)&Dtool_DNAVisGroup.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNAWall | DNAWall
//********************************************************************
PyMethodDef Dtool_Methods_DNAWall[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNAWall(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNANode._Dtool_ClassInit(NULL);
        Dtool_DNAWall.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNANode.As_PyTypeObject());
        Dtool_DNAWall.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNAWall.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNAWall.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNAWall.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNAWall)");
             printf(" Error In PyType_ReadyDNAWall");
             return;
        }
        Py_INCREF(&Dtool_DNAWall.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNAWall,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNAWall.As_PyTypeObject());
        PyModule_AddObject(module, "DNAWall",(PyObject *)&Dtool_DNAWall.As_PyTypeObject());
    }
}
//********************************************************************
//*** Py Init Code For .. DNAWindows | DNAWindows
//********************************************************************
PyMethodDef Dtool_Methods_DNAWindows[]= {
  { NULL, NULL }
};

void   Dtool_PyModuleClassInit_DNAWindows(PyObject *module)
{
    static bool initdone = false;
    if(!initdone)
    {
        initdone = true;
        // Dependent Objects   
        Dtool_DNAGroup._Dtool_ClassInit(NULL);
        Dtool_DNAWindows.As_PyTypeObject().tp_bases = Py_BuildValue("(O)",&Dtool_DNAGroup.As_PyTypeObject());
        Dtool_DNAWindows.As_PyTypeObject().tp_dict = PyDict_New();
        PyDict_SetItemString(Dtool_DNAWindows.As_PyTypeObject().tp_dict,"DtoolClassDict",Dtool_DNAWindows.As_PyTypeObject().tp_dict);
        if(PyType_Ready(&Dtool_DNAWindows.As_PyTypeObject()) < 0)
        {
             PyErr_SetString(PyExc_TypeError, "PyType_Ready(DNAWindows)");
             printf(" Error In PyType_ReadyDNAWindows");
             return;
        }
        Py_INCREF(&Dtool_DNAWindows.As_PyTypeObject());
        RegisterRuntimeClass(&Dtool_DNAWindows,-1);
    }
    if(module != NULL)
    {
        Py_INCREF(&Dtool_DNAWindows.As_PyTypeObject());
        PyModule_AddObject(module, "DNAWindows",(PyObject *)&Dtool_DNAWindows.As_PyTypeObject());
    }
}

//********************************************************************
//*** Module Object Linker .. 
//********************************************************************
static void BuildInstants(PyObject * module)
{
//********************************************************************
//*** Module Init Updcall ..DNAGroup
//********************************************************************
   Dtool_PyModuleClassInit_DNAGroup(module);
//********************************************************************
//*** Module Init Updcall ..DNANode
//********************************************************************
   Dtool_PyModuleClassInit_DNANode(module);
//********************************************************************
//*** Module Init Updcall ..DNALandmarkBuilding
//********************************************************************
   Dtool_PyModuleClassInit_DNALandmarkBuilding(module);
//********************************************************************
//*** Module Init Updcall ..DNAAnimBuilding
//********************************************************************
   Dtool_PyModuleClassInit_DNAAnimBuilding(module);
//********************************************************************
//*** Module Init Updcall ..DNAProp
//********************************************************************
   Dtool_PyModuleClassInit_DNAProp(module);
//********************************************************************
//*** Module Init Updcall ..DNAAnimProp
//********************************************************************
   Dtool_PyModuleClassInit_DNAAnimProp(module);
//********************************************************************
//*** Module Init Updcall ..DNABattleCell
//********************************************************************
   Dtool_PyModuleClassInit_DNABattleCell(module);
//********************************************************************
//*** Module Init Updcall ..DNACornice
//********************************************************************
   Dtool_PyModuleClassInit_DNACornice(module);
//********************************************************************
//*** Module Init Updcall ..DNADoor
//********************************************************************
   Dtool_PyModuleClassInit_DNADoor(module);
//********************************************************************
//*** Module Init Updcall ..DNAFlatBuilding
//********************************************************************
   Dtool_PyModuleClassInit_DNAFlatBuilding(module);
//********************************************************************
//*** Module Init Updcall ..DNAFlatDoor
//********************************************************************
   Dtool_PyModuleClassInit_DNAFlatDoor(module);
//********************************************************************
//*** Module Init Updcall ..DNAInteractiveProp
//********************************************************************
   Dtool_PyModuleClassInit_DNAInteractiveProp(module);
//********************************************************************
//*** Module Init Updcall ..DNASuitPoint
//********************************************************************
   Dtool_PyModuleClassInit_DNASuitPoint(module);
//********************************************************************
//*** Module Init Updcall ..DNASuitEdge
//********************************************************************
   Dtool_PyModuleClassInit_DNASuitEdge(module);
//********************************************************************
//*** Module Init Updcall ..DNAStorage
//********************************************************************
   Dtool_PyModuleClassInit_DNAStorage(module);
//********************************************************************
//*** Module Init Updcall ..DNALoader
//********************************************************************
   Dtool_PyModuleClassInit_DNALoader(module);
//********************************************************************
//*** Module Init Updcall ..DNASign
//********************************************************************
   Dtool_PyModuleClassInit_DNASign(module);
//********************************************************************
//*** Module Init Updcall ..DNASignBaseline
//********************************************************************
   Dtool_PyModuleClassInit_DNASignBaseline(module);
//********************************************************************
//*** Module Init Updcall ..DNASignGraphic
//********************************************************************
   Dtool_PyModuleClassInit_DNASignGraphic(module);
//********************************************************************
//*** Module Init Updcall ..DNASignText
//********************************************************************
   Dtool_PyModuleClassInit_DNASignText(module);
//********************************************************************
//*** Module Init Updcall ..DNAStreet
//********************************************************************
   Dtool_PyModuleClassInit_DNAStreet(module);
//********************************************************************
//*** Module Init Updcall ..DNAVisGroup
//********************************************************************
   Dtool_PyModuleClassInit_DNAVisGroup(module);
//********************************************************************
//*** Module Init Updcall ..DNAWall
//********************************************************************
   Dtool_PyModuleClassInit_DNAWall(module);
//********************************************************************
//*** Module Init Updcall ..DNAWindows
//********************************************************************
   Dtool_PyModuleClassInit_DNAWindows(module);
//********************************************************************
//*** Module Init Updcall ..  Externally Defined Class
//********************************************************************
}
static PyMethodDef python_simple_funcs[] = {
  //Support Function For Dtool_types ... for now in each module ??
  {"Dtool_BorrowThisReference", &Dtool_BorrowThisReference,METH_VARARGS,"Used to borrow 'this' pointer ( to, from)\n Assumes no ownership"}, 
  {"Dtool_AddToDictionary", &Dtool_AddToDictionary,METH_VARARGS,"Used to add items into a tp_dict"}, 
  { NULL, NULL ,0,NULL}
};

struct LibrayDef libpandadna_moddef = {python_simple_funcs,BuildInstants};
static InterrogateModuleDef _in_module_def = {
  1401732905,  /* file_identifier */
  "libpandadna",  /* library_name */
  "gPHL",  /* library_hash_name */
  "libpandadna",  /* module_name */
  "libpandadna.in",  /* database_filename */
  (InterrogateUniqueNameDef *)0,  /* unique_names */
  0,  /* num_unique_names */
  (void **)0,  /* fptrs */
  0,  /* num_fptrs */
  1,  /* first_index */
  270  /* next_index */
};

Configure(_in_configure_libpandadna);
ConfigureFn(_in_configure_libpandadna) {
  interrogate_request_module(&_in_module_def);
}

